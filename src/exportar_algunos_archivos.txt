
// Archivo: commandProcessor.js

import logger from './utils/logger.js';
import userContextManager from './modules/userContext.js';
import orderManager from './modules/orderManager.js';
import openaiService from './services/openaiService.js';
import config from './config/config.js';
import sheetService from './services/sheetService.js'
import { formatPrice, sendSplitMessages } from './utils/helpers.js';
import { normalizeCommand, findClosestCommand, sanitizeJsonString } from './utils/commandUtils.js';
import { CustomError } from './utils/errorHandler.js';
import fileOptimizationService from './services/fileOptimizationService.js';

class CommandProcessor {
  constructor() {}

  async processCommand(command, userId, ctx, { flowDynamic, gotoFlow, endFlow }) {
    try {
      logger.info(`Procesando comando para usuario ${userId}: ${JSON.stringify(command)}`);

      // Normalizar y corregir el comando
      const normalizedCommand = normalizeCommand(command.command);
      const correctedCommand = findClosestCommand(normalizedCommand) || normalizedCommand;
      
      logger.info(`Comando normalizado: ${normalizedCommand}, Comando corregido: ${correctedCommand}`);
      
      if (correctedCommand !== command.command) {
        logger.warn(`Comando corregido de "${command.command}" a "${correctedCommand}"`);
      }

      switch (correctedCommand) {
        case "LIST_ALL_SERVICES":
          return this.handleListAllServices(userId);
        case "SELECT_SERVICE":
          return this.handleSelectService(userId, command.service);
        case "SET_MEASURES":
          return this.handleSetMeasures(userId, command.width, command.height);
        case "SET_QUANTITY":
          return this.handleSetQuantity(userId, command.quantity);
        case "SET_FINISHES":
          return this.handleSetFinishes(userId, command.sellado, command.ojetillos, command.bolsillo);
        case "RESULT_ANALYSIS":
            return this.handleAnalysisResult(userId, command.result);
        case "CONFIRM_ORDER":
          return this.handleConfirmOrder(userId, ctx, { flowDynamic, gotoFlow, endFlow });
        case "LIST_LAST_ORDERS":
          return this.handleListLastOrders(userId, flowDynamic);
        default:
          logger.warn(`Comando desconocido recibido: ${command.command}`);
          return { currentOrderUpdated: false };
      }
    } catch (error) {
      logger.error(`Error al procesar comando: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  // Nuevo m√©todo para manejar RESULT_ANALYSIS
  async handleAnalysisResult(userId, result) {
    try {
      const isValid = result === true || result === "true";
      userContextManager.updateCurrentOrder(userId, { fileValidation: isValid });
      logger.info(`Resultado del an√°lisis actualizado para usuario ${userId}: ${isValid}`);
      return { currentOrderUpdated: true };
    } catch (error) {
      logger.error(`Error al actualizar resultado del an√°lisis para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetQuantity(userId, quantity) {
    try {
      const result = await orderManager.handleSetQuantity(userId, quantity);
      logger.info(`Cantidad establecida para usuario ${userId}: ${quantity}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar cantidad para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetFinishes(userId, sellado, ojetillos, bolsillo) {
    try {
      const result = await orderManager.setFinishes(userId, sellado, ojetillos, bolsillo);
      logger.info(`Acabados establecidos para usuario ${userId}: sellado=${sellado}, ojetillos=${ojetillos}, bolsillo=${bolsillo}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar acabados para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetMeasures(userId, width, height) {
    try {
      const result = await orderManager.handleSetMeasures(userId, width, height);
      logger.info(`Medidas establecidas para usuario ${userId}: ${width}x${height}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar medidas para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }


  async handleFileAnalysis(ctx, flowDynamic) {
    const userId = ctx.from;
    const currentOrder = userContextManager.getCurrentOrder(userId);
    const fileAnalysis = currentOrder.fileAnalysis;
 
    if (!fileAnalysis) {
      await flowDynamic("Lo siento, parece que no hay un archivo para analizar. Por favor, env√≠a un archivo primero.");
      return;
    }
 
    logger.info(`Iniciando an√°lisis de archivo para usuario ${userId}`);
    let response = "He analizado tu archivo. Aqu√≠ est√°n los resultados:\n\n";
    response += `üìÑ Formato: *${fileAnalysis.format}*\n`;
    response += `üìè Dimensiones en p√≠xeles: *${fileAnalysis.width}x${fileAnalysis.height}*\n`;
   
    const widthM = fileAnalysis.physicalWidth.toFixed(2);
    const heightM = fileAnalysis.physicalHeight.toFixed(2);
    response += `üìê Dimensiones f√≠sicas: *${widthM}x${heightM} m* (${(widthM*100).toFixed(2)}x${(heightM*100).toFixed(2)} cm)\n`;
   
    response += `üìä √Årea del dise√±o: *${fileAnalysis.area} m¬≤*\n`;
    response += `üîç Resoluci√≥n: *${fileAnalysis.dpi} DPI*\n`;
   
    if (fileAnalysis.colorSpace) {
      response += `üé® Espacio de color: *${fileAnalysis.colorSpace}*\n`;
    }
   
    if (fileAnalysis.fileSize) {
      response += `üì¶ Tama√±o del archivo: *${fileAnalysis.fileSize}*\n`;
    }
 
    logger.info(`An√°lisis de archivo completado para usuario ${userId}: ${JSON.stringify(fileAnalysis)}`);
    await flowDynamic(response);
    userContextManager.updateFileAnalysisResponded(userId, true);

    // Generar y enviar el segundo mensaje
    await this.handleFileValidationInstruction(ctx, flowDynamic);
  }


async handleFileValidationInstruction(ctx, flowDynamic) {
  const userId = ctx.from;
  const currentOrder = userContextManager.getCurrentOrder(userId);

  logger.info(`Iniciando validaci√≥n de archivo para usuario ${userId}`);

  // Verificar que el currentOrder est√° actualizado
  if (!currentOrder.service || (!currentOrder.measures && currentOrder.requiresMeasures())) {
      await flowDynamic("Parece que falta informaci√≥n en tu pedido. Por favor, aseg√∫rate de haber proporcionado el servicio y las medidas necesarias.");
      return;
  }

  try {
      // Obtener optimizaci√≥n del archivo
      const fileInfo = currentOrder.fileAnalysis;
      if (!fileInfo) {
          throw new Error('No se encontr√≥ an√°lisis del archivo');
      }

      // Calcular optimizaci√≥n usando el nuevo servicio
      const optimizationResult = fileOptimizationService.calculateOptimalDPI(
          currentOrder.areaServicio,
          fileInfo.fileSize,
          fileInfo.dpi
      );

      // Generar reporte t√©cnico
      const technicalReport = fileOptimizationService.generateOptimizationReport(optimizationResult);
      logger.info("Reporte tecnico"),
      logger.info(technicalReport);
      // Mantener las gu√≠as DPI originales para contexto
      const dpiGuidelines = `
      üìè **Resoluci√≥n (DPI) seg√∫n el √Årea y Distancia de Visualizaci√≥n** üìê
  
      Ten en cuenta lo siguiente sobre la resoluci√≥n (DPI) en funci√≥n del √°rea del servicio *${currentOrder.areaServicio} m¬≤* y la distancia de visualizaci√≥n, aplicando a productos espec√≠ficos de *Chileimprime*:
  
      - **√Åreas peque√±as (menos de 1.0 m¬≤)** üñºÔ∏è:
        - Se recomienda una resoluci√≥n de *150-300 DPI* para obtener alta calidad.
        - Ideal para productos como *Tarjetas de presentaci√≥n (1000 unidades)*, *Flyers 15√ó22 cms*, y *Mini Roller de escritorio papel sint√©tico*, los cuales se observan de cerca (distancia menor a *1.5 metros*).
  
      - **√Åreas medianas (1.5 m¬≤ a 5 m¬≤)** üìä:
        - La resoluci√≥n puede oscilar entre *72 y 150 DPI*.
        - Adecuada para *Pendones Roller 90x200 cms*, *Palomas 2 caras 70x120 cms*, y *PVC 11 Oz mt¬≤*, que se visualizan desde distancias intermedias (*1.5 a 3 metros*).
  
      - **√Åreas grandes (5 m¬≤ a 10 m¬≤)** üì¢:
        - Se recomienda una resoluci√≥n entre *35 y 72 DPI*.
        - Ideal para *Back Light Banner*, *Tela Mesh* y *PVC Blackout*, que se ver√°n a distancias de *3 a 5 metros*.
  
      - **√Åreas muy grandes (m√°s de 10 m¬≤)** üè¢:
        - Resoluciones bajas, entre *20 y 35 DPI*, son aceptables debido a que estos gr√°ficos se ven desde distancias mayores a *5 metros*.
        - Ejemplos: *Murales publicitarios*, *Back Light Textil*, o *Windows One Vision* que ser√°n observados a grandes distancias.
  
      ### üìå Notas Adicionales:
      1. **Distancia de Visualizaci√≥n** üëÄ: Es un factor cr√≠tico para determinar el DPI correcto. A mayor distancia, menor es la necesidad de alta resoluci√≥n, ya que el ojo humano no distingue los detalles finos.
      2. **Tama√±o del Archivo** üíæ: Usar resoluciones demasiado altas en √°reas grandes como *PVC Alta Definici√≥n* para grandes formatos incrementa significativamente el tama√±o del archivo y el tiempo de impresi√≥n sin una mejora perceptible en la calidad visual.
      3. **Material Espec√≠fico** üß±: Productos como *Adhesivo Empavonado*, *Vinilo Adhesivo Reflectante* y *Rotulaci√≥n para fundido* requieren considerar el material y su capacidad de impresi√≥n, por lo que es recomendable mantener el DPI en el rango medio de *72-150 DPI* para garantizar una buena nitidez.
  
      ‚ú® **Emojis y Formateo**:
      - Utiliza emojis relevantes para resaltar puntos importantes.
      - Aplica **formateo con asteriscos** usando un asterisco por lado (*texto*) para resaltar palabras clave.
      - Aseg√∫rate de mantener una estructura clara con saltos de l√≠nea para facilitar la lectura en WhatsApp.
  
      Estas gu√≠as te ayudar√°n a optimizar la calidad y la eficiencia en cada proyecto de impresi√≥n seg√∫n el tipo de producto y su aplicaci√≥n en el mercado chileno.
      `;

      // Generar la instrucci√≥n para la IA combinando la informaci√≥n t√©cnica
      const instruction = `üîÑ **Nueva Solicitud de Archivo** üìÇ

      El usuario acaba de subir un archivo. Ahora eres un **experto en impresi√≥n de gran formato** e **ingeniero en color**. 
      
      An√°lisis T√©cnico del Archivo:
      ${technicalReport}

      Informaci√≥n del Pedido:
      - Servicio: *${currentOrder.service}*
      - √Årea: *${currentOrder.areaServicio} m¬≤*
      - Medidas solicitadas: *${currentOrder.measures ? `${currentOrder.measures.width}x${currentOrder.measures.height} m` : 'No especificadas'}*
      
      An√°lisis del Archivo:
      - Formato: *${fileInfo.format}*
      - DPI actual: *${fileInfo.dpi}*
      - √Årea del dise√±o: *${fileInfo.area} m¬≤*
      - Espacio de color: *${fileInfo.colorSpace}*
      
      Directrices DPI:
      ${dpiGuidelines}

      Criterios de Validaci√≥n:
      ${userContextManager.getFileValidationCriteria()}

    ‚ö†Ô∏è **IMPORTANTE**:
    - Al inicio de tu respuesta, incluye el comando JSON:
      {"command": "RESULT_ANALYSIS", "result": true/false}
    
    - Estructura tu respuesta en 3 secciones:
      1. ### üîç Criterios de Validaci√≥n Aplicados:
         - Solo mencionar los criterios relevantes para el archivo del cliente
         - NO incluir informaci√≥n sobre resoluci√≥n de m√°quinas de impresi√≥n

      2. ### ‚úÖ/‚ùå Resultado de la Validaci√≥n:
         Si el resultado es positivo:
         - Confirmar que el archivo es v√°lido
         - Invitar al cliente a confirmar el pedido
         - Mencionar cualquier recomendaci√≥n menor si aplica

         Si el resultado es negativo:
         - Explicar claramente por qu√© el archivo no es v√°lido
         - Proporcionar recomendaciones espec√≠ficas para corregir el archivo
         - Ofrecer la opci√≥n de aceptar el archivo bajo responsabilidad del cliente con el siguiente texto:
           "Si a√∫n deseas proceder con este archivo a pesar de las observaciones mencionadas, puedes confirmar que aceptas 
           la impresi√≥n bajo tu responsabilidad, entendiendo que la calidad final podr√≠a verse afectada."

      3. ### üëâ Siguiente Paso:
         Si es v√°lido:
         - Indicar que puede proceder a confirmar el pedido
         
         Si no es v√°lido:
         - Indicar que puede subir un nuevo archivo corregido
         - O confirmar que acepta proceder bajo su responsabilidad
         - En caso de dudas, sugerir contactar con un agente.
      `;

      // Log para depuraci√≥n
      logger.info(`Enviando instrucci√≥n a la IA para validaci√≥n de archivo para usuario ${userId}`);
      logger.debug(`Instrucci√≥n completa: ${instruction}`);

      // Obtener respuesta de la IA
      const aiResponse = await openaiService.getChatCompletion(
          openaiService.getSystemPrompt(
              userContextManager.getGlobalServices(),
              currentOrder,
              userContextManager.getGlobalAdditionalInfo(),
              userContextManager.getChatContext(userId)
          ),
          userContextManager.getChatContext(userId).concat([
              { role: "system", content: instruction }
          ])
      );

      // Actualizar contexto
      userContextManager.updateContext(userId, instruction, "system");
      userContextManager.updateContext(userId, aiResponse, "assistant");

      // Actualizar optimizaci√≥n en el contexto
      userContextManager.updateCurrentOrder(userId, {
          fileOptimization: optimizationResult
      });

      // Procesar comandos en la respuesta
      const commands = this.processAIResponseCommandProcessor(aiResponse);
      for (const command of commands) {
          await this.processCommand(command, userId, ctx, { flowDynamic });
      }

      // Enviar respuesta al usuario
      await sendSplitMessages(flowDynamic, aiResponse);

      logger.info(`Validaci√≥n de archivo completada para usuario ${userId}`);

  } catch (error) {
      logger.error(`Error en validaci√≥n de archivo para usuario ${userId}: ${error.message}`);
      await flowDynamic("‚ùå Ha ocurrido un error al analizar tu archivo. Por favor, intenta nuevamente o contacta con soporte.");
  }
}

  processAIResponseCommandProcessor(aiResponse) {
    const commandRegex = /{[^}]+}/g;
    const commands = aiResponse.match(commandRegex) || [];
    return commands.map(cmd => {
      try {
        const sanitizedCmd = sanitizeJsonString(cmd);
        logger.debug(`Comando sanitizado: ${sanitizedCmd}`);
        const parsedCmd = JSON.parse(sanitizedCmd);
        logger.info(`Comando parseado correctamente: ${JSON.stringify(parsedCmd)}`);
        return parsedCmd;
      } catch (error) {
        logger.error(`Error al parsear comando JSON: ${error.message}`);
        logger.debug(`Comando problem√°tico: ${cmd}`);
        return null;
      }
    }).filter(cmd => cmd !== null);
  }
  

  async handleListAllServices(userId, actions) {
    const services = sheetService.getServices();
    const formattedServices = this.formatServiceList(services);
    logger.info(`Lista de servicios preparada para usuario ${userId}`);
    
    return { 
      currentOrderUpdated: true, 
      action: 'SHOW_SERVICES',
      data: formattedServices
    };
  }

  formatServiceList(services) {
    let formattedList = "Aqu√≠ tienes la lista completa de servicios disponibles:\n\n";

    const categoryEmojis = {
      'Telas PVC': 'üñºÔ∏è',
      'Banderas': 'üö©',
      'Adhesivos': 'üè∑Ô∏è',
      'Adhesivo Vehicular': 'üöó',
      'Back Light': 'üí°',
      'Otros': 'üì¶',
      'Imprenta': 'üñ®Ô∏è',
      'P√©ndon Roller': 'üéûÔ∏è',
      'Palomas': 'üê¶',
      'Figuras': 'üî∫',
      'Extras': '‚ûï'
    };

    for (const [category, categoryServices] of Object.entries(services)) {
      const emojiIcon = categoryEmojis[category] || '';
      formattedList += `${emojiIcon} *${category}:*\n`;

      categoryServices.forEach(service => {
        const serviceName = service.name;
        const priceFormatted = formatPrice(service.precio);
        const priceBold = `*$${
          priceFormatted
        }*`; // Envuelve el precio con asteriscos para negrita
        formattedList += `- ${serviceName}: ${priceBold}\n`;
      });
      formattedList += "\n";
    }

    formattedList += "Para obtener m√°s informaci√≥n sobre un servicio espec√≠fico, por favor menciona su nombre.";
    return formattedList;
  }

  async handleSelectService(userId, serviceName) {
    if (!serviceName) {
      logger.warn(`Nombre de servicio inv√°lido: ${serviceName}`);
      await flowDynamic('Parece que no has especificado un servicio v√°lido. Por favor, ind√≠canos qu√© servicio deseas.');
      return { currentOrderUpdated: false, error: 'El nombre del servicio es inv√°lido o no se proporcion√≥.' };
    }

    try {
      const result = await orderManager.handleSelectService(userId, serviceName);
      logger.info(`Servicio seleccionado para usuario ${userId}: ${serviceName}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al seleccionar servicio para usuario ${userId}: ${error.message}`);
      await flowDynamic(`Lo siento, ha ocurrido un error al seleccionar el servicio. ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }


  async handleConfirmOrder(userId, ctx, { flowDynamic, gotoFlow, endFlow }) {
    try {
      logger.info(`Iniciando proceso de confirmaci√≥n de orden para usuario ${userId}`);

      // Modificaci√≥n: Verificar si la orden ya est√° confirmada
      if (orderManager.isOrderConfirmed(userId)) {
        logger.warn(`La orden para el usuario ${userId} ya ha sido confirmada. Evitando doble confirmaci√≥n.`);
        await flowDynamic("‚úÖ Tu pedido ya ha sido confirmado previamente. Si necesitas asistencia adicional, por favor contacta con un representante.");
        return { currentOrderUpdated: false };
      }

      const currentOrder = userContextManager.getCurrentOrder(userId);
      
      if (!userContextManager.isOrderComplete(userId)) {
        const missingFields = userContextManager.getIncompleteFields(userId);
        const errorMessage = `La orden no est√° completa. Faltan los siguientes campos: ${missingFields.join(', ')}`;
        logger.warn(errorMessage);
        throw new CustomError('IncompleteOrderError', errorMessage);
      }
  
      // A√±adir informaci√≥n del contexto
      currentOrder.userName = ctx.pushName || 'Cliente';
      currentOrder.userPhone = ctx.from;
  
      // Calcular precios y actualizar la orden
      const calculatedPrices = orderManager.calculatePrice(currentOrder);
      currentOrder.precioTerminaciones = calculatedPrices.precioTerminaciones;
      currentOrder.precioTotalTerminaciones = calculatedPrices.precioTotalTerminaciones;
      currentOrder.total = calculatedPrices.total;
  
      logger.info(`Precios calculados para la orden: ${JSON.stringify(calculatedPrices)}`);
  
      const result = await orderManager.finalizeOrder(userId, currentOrder);
      
      if (result.success) {
        logger.info(`Pedido confirmado para usuario ${userId}. N√∫mero de pedido: ${result.orderNumber}`);

        // Modificaci√≥n: Enviar resumen de la orden
        const orderSummary = orderManager.formatOrderSummary(currentOrder);
        await flowDynamic(`üéâ ¬°Gracias por tu pedido! Tu n√∫mero de cotizaci√≥n es: *${result.orderNumber}*`);
        await flowDynamic(orderSummary);
        await flowDynamic(result.message);

        return { currentOrderUpdated: true, nextFlow: 'promoFlow' };
      } else {
        throw new Error("Error al confirmar el pedido");
      }
    } catch (error) {
      logger.error(`Error al confirmar el pedido para usuario ${userId}: ${error.message}`);
      if (error.name === 'IncompleteOrderError') {
        const systemMessage = `Campos faltantes: ${error.message}`;
        userContextManager.updateContext(userId, systemMessage, "system");
        await flowDynamic("Lo siento, pero parece que falta informaci√≥n en tu pedido. Por favor, completa todos los detalles antes de confirmar.");
        return { currentOrderUpdated: false, error: error.message };
      } else {
        await flowDynamic("Lo siento, ha ocurrido un error al procesar tu pedido. Por favor, intenta nuevamente o contacta con nuestro equipo de soporte.");
        return { currentOrderUpdated: false, error: error.message };
      }
    }
  }



  async handleListLastOrders(userId, flowDynamic) {
    try {
        logger.info(`Solicitando √∫ltimos 10 pedidos para usuario ${userId}`);
        
        const orders = await sheetService.searchOrdersHistory(userId);
        
        if (!orders || orders.length === 0) {
            await flowDynamic("No se encontraron pedidos previos para tu n√∫mero. ¬øTe gustar√≠a realizar tu primer pedido? üòä");
            logger.info(`No se encontraron pedidos para usuario ${userId}`);
            return { currentOrderUpdated: false };
        }

        // Crear mensaje formateado para WhatsApp
        let message = "*üìã Tus √∫ltimos pedidos:*\n\n";
        
        orders.forEach((order, index) => {
            message += `*${index + 1}.* Pedido: *${order.pedido}*\n`;
            message += `   üìÖ Fecha: ${order.fechaOriginal}\n`;
            if (order.servicio) {
                message += `   üñ®Ô∏è Servicio: ${order.servicio}\n`;
            }
            if (order.estado) {
                message += `   üìä Estado: ${order.estado}\n`;
            }
            if (order.total) {
                try {
                    // Convertir el total a n√∫mero y manejar diferentes formatos
                    let totalNumber;
                    if (typeof order.total === 'string') {
                        // Remover el s√≠mbolo de peso y cualquier punto de miles si existe
                        totalNumber = parseFloat(order.total.replace(/[$\.]/g, '').replace(',', '.'));
                    } else {
                        totalNumber = parseFloat(order.total);
                    }

                    if (!isNaN(totalNumber)) {
                        message += `   üí∞ Total: $${formatPrice(totalNumber)}\n`;
                    }
                    
                    logger.debug(`Total procesado para pedido ${order.pedido}: ${totalNumber}`);
                } catch (error) {
                    logger.warn(`Error al formatear precio para pedido ${order.pedido}: ${error.message}`);
                    // Si hay error en el formateo, mostrar el total sin formato
                    message += `   üí∞ Total: ${order.total}\n`;
                }
            }
            message += "\n";
        });

        message += "_Para consultar detalles espec√≠ficos de un pedido o realizar un nuevo pedido, estoy aqu√≠ para ayudarte. üòä_";

        await flowDynamic(message);
        logger.info(`Lista de √∫ltimos pedidos enviada a usuario ${userId}`);
        
        return { currentOrderUpdated: false };
    } catch (error) {
        logger.error(`Error al obtener √∫ltimos pedidos para usuario ${userId}: ${error.message}`);
        logger.error(`Stack trace: ${error.stack}`); // Agregado para mejor debugging
        await flowDynamic("Lo siento, hubo un error al obtener tus pedidos anteriores. Por favor, intenta nuevamente m√°s tarde. üòî");
        return { currentOrderUpdated: false, error: error.message };
    }
}



  
}

export default new CommandProcessor();


// Archivo: modules\flowManager.js

import { addKeyword, EVENTS } from '@builderbot/bot';
import logger from '../utils/logger.js';
import userContextManager from './userContext.js';
import orderManager from './orderManager.js';
import openaiService from '../services/openaiService.js';
import whatsappService from '../services/whatsappService.js';
import config from '../config/config.js';
import { CustomError } from '../utils/errorHandler.js';
import inactivityMiddleware from '../core/inactivity-middleware.js';
import blacklistMiddleware from '../core/blacklist-middleware.js';
import MessageQueue from './messageQueue.js';
import fileValidationService from '../services/fileValidationService.js';
import commandProcessor from '../commandProcessor.js';
import sheetService from '../services/sheetService.js';

class FlowManager {
  constructor() {
    this.flows = {
      principalFlow: null,
      confirmedFlow: null,
      restartBotFlow: null,
      documentFlow: null,
      voiceNoteFlow: null,
      catchAllFlow: null,
      idleTimeoutFlow: null,
      promoFlow: null,
      mediaFlow: null,
      emailConfirmationFlow: null, // A√±adido para registrar el nuevo flujo

    };
    this.blacklist = new Map();
    this.idleTimers = new Map();
    this.messageQueue = new MessageQueue({ gapSeconds: config.messageQueueGapSeconds });
    this.cooldowns = new Map();
    this.initialMessagePromises = new Map();
    this.initialMessageLocks = new Map(); // A√±ade esta l√≠nea

  }


  async initializeFlows() {
    try {
      // Inicializar los flujos
      this.flows.principalFlow = this.createPrincipalFlow();
      this.flows.confirmedFlow = this.createConfirmedFlow();
      this.flows.restartBotFlow = this.createRestartBotFlow();
      this.flows.documentFlow = this.createDocumentFlow();
      this.flows.voiceNoteFlow = this.createVoiceNoteFlow();
      this.flows.catchAllFlow = this.createCatchAllFlow();
      this.flows.idleTimeoutFlow = this.createIdleTimeoutFlow();
      this.flows.promoFlow = this.createPromoFlow();
      this.flows.mediaFlow = this.createMediaFlow();
      this.flows.emailConfirmationFlow = this.createEmailConfirmationFlow(); // Inicializar el nuevo flujo


      // Agregar middlewares
      Object.values(this.flows).forEach(flow => {
        if (flow && typeof flow.addAction === 'function') {
          flow.addAction(inactivityMiddleware(this));
          flow.addAction(blacklistMiddleware(this));
        } else {
          logger.warn(`Un flujo no tiene el m√©todo addAction o es nulo`);
        }
      });

      logger.info('Flujos inicializados correctamente');
      return Object.values(this.flows).filter(flow => flow !== null);
    } catch (error) {
      logger.error(`Error al inicializar flujos: ${error.message}`);
      throw new CustomError('FlowInitializationError', 'Error al inicializar los flujos', error);
    }
  }


  getFlowByName(name) {
    return this.flows[name];
  }

  // Nuevo m√©todo centralizado para manejar mensajes iniciales
  async handleInitialMessagesOnce(userId, flowDynamic) {
    logger.info(`Intentando enviar mensajes iniciales para usuario ${userId}`);
    
    if (this.initialMessageLocks.get(userId)) {
      logger.info(`Usuario ${userId} ya tiene mensajes iniciales en proceso. Ignorando nueva solicitud.`);
      return;
    }

    this.initialMessageLocks.set(userId, true);

    if (!this.initialMessagePromises.has(userId)) {
      this.initialMessagePromises.set(userId, (async () => {
        if (!userContextManager.hasUserInteracted(userId)) {
          logger.info(`Iniciando env√≠o de mensajes iniciales para usuario ${userId}`);

          try {
            // Crear una cola de mensajes
            const messageQueue = [
              { type: 'image', content: 'https://chileimprime.cl/wp-content/uploads/2024/10/Catalogo-marzo.jpg' },
              //{ type: 'services', content: await commandProcessor.handleListAllServices(userId) },
              { type: 'text', content: `üëâ Selecciona uno de los servicios enviados para iniciar tu cotizaci√≥n.

Tambi√©n puedes realizar las siguientes acciones:
- üîç Ver tus √∫ltimos 10 pedidos.
- üïí Consultar horarios de atenci√≥n
- üéâ Conocer nuestras promociones actuales
- üñ®Ô∏è Resolver dudas sobre procesos de impresi√≥n
- üìÑ Consultar especificaciones de archivos o par√°metros t√©cnicos
- üéôÔ∏è Analizar archivos en tiempo real para evaluar validez.

Si necesitas contactar a un agente, por favor escribe *agente* o *humano.*

Para reiniciar el bot en cualquier momento, simplemente escribe *bot.*` }
            ];

            // Enviar mensajes de la cola con un intervalo
            for (const message of messageQueue) {
              switch (message.type) {
                case 'image':
                  await flowDynamic([{ body: 'Catalogo marzo 2024', media: message.content }]);
                  break;
                case 'services':
                  if (message.content && message.content.data) {
                    await flowDynamic(message.content.data);
                  }
                  break;
                case 'text':
                  await flowDynamic(message.content);
                  break;
              }
              await new Promise(resolve => setTimeout(resolve, 3000)); // Espera 3 segundos entre mensajes
            }

            userContextManager.setInitialMessagesSent(userId, true);
            userContextManager.setHasInteracted(userId, true);
            logger.info(`Mensajes iniciales enviados y estado actualizado para usuario ${userId}`);
          } catch (error) {
            logger.error(`Error al enviar mensajes iniciales para usuario ${userId}: ${error.message}`);
          } finally {
            this.initialMessageLocks.delete(userId);
          }
        } else {
          logger.info(`Usuario ${userId} ya ha interactuado, omitiendo mensajes iniciales`);
        }
      })());
    }

    await this.initialMessagePromises.get(userId);
    this.initialMessagePromises.delete(userId);
  }


  createEmailConfirmationFlow() {
    return addKeyword(EVENTS.WELCOME)
      .addAction(async (ctx, { flowDynamic, endFlow, gotoFlow }) => {
        const userId = ctx.from;
        const userContext = userContextManager.getUserContext(userId);
        
        logger.info(`Iniciando flujo de confirmaci√≥n de correo para usuario ${userId}`);
        
        try {
          // Si estamos esperando un nuevo correo, procesarlo directamente
          if (userContext.currentOrder.esperandoNuevoCorreo) {
            logger.info(`Procesando nuevo correo para usuario ${userId}: ${ctx.body}`);
            
            if (this.validateEmail(ctx.body)) {
              logger.info(`Nuevo correo v√°lido ingresado por usuario ${userId}: ${ctx.body}`);
              userContext.currentOrder.correo = ctx.body;
              userContext.currentOrder.correoConfirmed = true;
              userContext.currentOrder.esperandoNuevoCorreo = false;
              userContext.currentOrder.messageProcessed = true; // Nueva bandera
              await flowDynamic('‚úÖ ¬°Gracias! Continuaremos con el proceso.');
              return gotoFlow(this.flows.principalFlow);
            } else {
              logger.warn(`Correo inv√°lido ingresado por usuario ${userId}: ${ctx.body}`);
              userContext.currentOrder.messageProcessed = true; // Nueva bandera
              await flowDynamic('‚ùå El correo electr√≥nico ingresado no es v√°lido. Por favor, intenta nuevamente:');
              return;
            }
          }

          // Si el mensaje ya fue procesado, no continuar
          if (userContext.currentOrder.messageProcessed) {
            logger.info(`Mensaje ya procesado para usuario ${userId}, omitiendo procesamiento adicional`);
            userContext.currentOrder.messageProcessed = false; // Reset para el siguiente mensaje
            return;
          }

          const orders = await sheetService.searchOrdersByPhone(userId);
          logger.info(`Buscando pedidos previos para el n√∫mero ${userId}`);

          if (orders && orders.length > 0) {
            const email = await sheetService.getLastEmailByPhoneNumber(userId);
            
            if (email) {
              logger.info(`Correo electr√≥nico encontrado para el n√∫mero ${userId}: ${email}`);
              userContext.currentOrder.correo = email;
              userContext.currentOrder.messageProcessed = true; // Nueva bandera
              await flowDynamic(`üëã Bienvenido de nuevo, antes de continuar necesito que confirmes si tu correo es v√°lido: *${email}*, o si deseas modificarlo.\n\nPor favor, responde con:\n1Ô∏è‚É£ Confirmar y continuar\n2Ô∏è‚É£ Modificar el correo`);
              return;
            } else {
              logger.info(`No se encontr√≥ correo para el usuario ${userId}. Solicitando nuevo correo.`);
              userContext.currentOrder.esperandoNuevoCorreo = true;
              userContext.currentOrder.messageProcessed = true; // Nueva bandera
              await flowDynamic('üëã Bienvenido, por favor ingresa tu correo electr√≥nico para continuar:');
              return;
            }
          } else {
            logger.info(`No se encontraron pedidos previos para ${userId}. Solicitando nuevo correo.`);
            userContext.currentOrder.esperandoNuevoCorreo = true;
            userContext.currentOrder.messageProcessed = true; // Nueva bandera
            await flowDynamic('üëã Bienvenido, por favor ingresa tu correo electr√≥nico para continuar:');
            return;
          }
        } catch (error) {
          logger.error(`Error en createEmailConfirmationFlow para usuario ${userId}: ${error.message}`);
          await flowDynamic('‚ùå Ha ocurrido un error al procesar tu correo electr√≥nico. Por favor, intenta nuevamente m√°s tarde.');
          return endFlow();
        }
      })
      .addAction(async (ctx, { flowDynamic, gotoFlow, endFlow }) => {
        const userId = ctx.from;
        const userContext = userContextManager.getUserContext(userId);

        // Si el mensaje ya fue procesado por el primer addAction, no hacer nada
        if (userContext.currentOrder.messageProcessed) {
          logger.info(`Mensaje ya procesado en addAction anterior para usuario ${userId}, omitiendo segundo procesamiento`);
          return;
        }

        const response = ctx.body.trim();
        logger.info(`Procesando respuesta de usuario ${userId}: ${response}`);

        try {
          // Si ya tenemos un correo y estamos esperando confirmaci√≥n
          if (userContext.currentOrder.correo && !userContext.currentOrder.esperandoNuevoCorreo) {
            if (response === '1' || response === '1Ô∏è‚É£') {
              logger.info(`Usuario ${userId} confirm√≥ su correo existente: ${userContext.currentOrder.correo}`);
              userContext.currentOrder.correoConfirmed = true;
              userContext.currentOrder.messageProcessed = true;
              await flowDynamic('‚úÖ ¬°Gracias! Continuaremos con el proceso.');
              return gotoFlow(this.flows.principalFlow);
            } else if (response === '2' || response === '2Ô∏è‚É£') {
              logger.info(`Usuario ${userId} eligi√≥ modificar su correo`);
              userContext.currentOrder.esperandoNuevoCorreo = true;
              userContext.currentOrder.messageProcessed = true;
              await flowDynamic('Por favor, ingresa tu nuevo correo electr√≥nico:');
              return;
            }
          }
        } catch (error) {
          logger.error(`Error procesando respuesta para usuario ${userId}: ${error.message}`);
          await flowDynamic('‚ùå Ha ocurrido un error. Por favor, intenta nuevamente.');
          userContext.currentOrder.esperandoNuevoCorreo = false;
          return gotoFlow(this.flows.principalFlow);
        }
      });
  }

  // M√©todo para validar el correo electr√≥nico
  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }




  createPrincipalFlow() {
    return addKeyword(EVENTS.WELCOME)
      .addAction(async (ctx, { flowDynamic, gotoFlow, endFlow }) => {  // A√±adir endFlow aqu√≠
        const userId = ctx.from;
        const userContext = userContextManager.getUserContext(userId);
  
        if (this.initialMessageLocks.get(userId)) {
          logger.info(`Ignorando mensaje de usuario ${userId} durante el env√≠o de mensajes iniciales`);
          return;
        }
  
        if (!userContext.currentOrder.correoConfirmed) {
          logger.info(`Redirigiendo a emailConfirmationFlow para usuario ${userId}`);
          return gotoFlow(this.flows.emailConfirmationFlow);
        }
  
        if (!userContextManager.hasUserInteracted(userId)) {
          await this.handleInitialMessagesOnce(userId, flowDynamic);
        } else {
          this.enqueueMessage(userId, ctx.body, async (accumulatedMessage) => {
            await this.handleChatbotResponse(ctx, { flowDynamic, gotoFlow, endFlow }, accumulatedMessage);
          });
        }
      });
  }

  createMediaFlow() {
    return addKeyword(EVENTS.MEDIA)
      .addAction(async (ctx, { flowDynamic }) => {
        const userId = ctx.from;
        logger.info(`Imagen recibida de ${userId}. Enviando instrucciones espec√≠ficas.`);

        userContextManager.setHasInteracted(userId, true);
  
        const messages = [
          'üñºÔ∏è *¬°Hola!* Hemos recibido tu imagen, pero necesitamos que nos env√≠es tu dise√±o como *documento* para preservar la calidad.\n\nLas im√°genes enviadas como foto en WhatsApp se comprimen y pierden calidad, lo que afecta el an√°lisis y la impresi√≥n.\n\nPor favor, env√≠a el mismo archivo como *documento* en uno de los siguientes formatos de alta calidad: *PDF, AI, PSD* o una imagen en alta resoluci√≥n.\n\n*Criterios de Validaci√≥n Resumidos:*\n\n- Resoluci√≥n m√≠nima: 72 dpi y m√°xima: 150 dpi.\n- Formato preferente: CMYK para evitar diferencias de color.\n- Tama√±o real del dise√±o acorde al tama√±o de impresi√≥n.',
          'üì± *C√≥mo enviar un documento en WhatsApp desde Android o iPhone:*\n\n1Ô∏è‚É£ Abre el chat de *Chileimprime*.\n2Ô∏è‚É£ Toca el √≠cono de *adjuntar* (üìé).\n3Ô∏è‚É£ Selecciona *Documento*.\n4Ô∏è‚É£ Busca y selecciona tu archivo de dise√±o.\n5Ô∏è‚É£ Presiona *Enviar*.',
          '‚ú® *Esperamos tu archivo nuevamente como documento para iniciar el an√°lisis.* ¬°Gracias!'
        ];
  
        try {
          for (const message of messages) {
            await flowDynamic(message);
            logger.info(`Mensaje enviado a ${userId}: ${message.substring(0, 50)}...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
          }
          logger.info(`Instrucciones para imagen enviadas exitosamente a ${userId}`);
        } catch (error) {
          logger.error(`Error al enviar mensajes en mediaFlow para usuario ${userId}: ${error.message}`);
          await flowDynamic('‚ö†Ô∏è *Ha ocurrido un error al enviar las instrucciones. Por favor, intenta nuevamente m√°s tarde.*');
        }
      });
  }
  

  createDocumentFlow() {
    return addKeyword(EVENTS.DOCUMENT)
      .addAction(async (ctx, { flowDynamic }) => {
        const userId = ctx.from;
        logger.info(`Documento recibido de ${userId}. Iniciando an√°lisis.`);
        userContextManager.setHasInteracted(userId, true);

        try {
          const filePath = await whatsappService.saveFile(ctx);
          logger.info(`Archivo guardado para usuario ${userId}: ${filePath}`);
  
          const fileInfo = await fileValidationService.analyzeFile(filePath);
          logger.info(`An√°lisis completado para archivo de usuario ${userId}: ${JSON.stringify(fileInfo)}`);
          
          await userContextManager.updateCurrentOrder(userId, {
            filePath: filePath,
            fileAnalysis: fileInfo
          });
          
          await flowDynamic('üìÑ Documento recibido. Analizando...');
  
          await commandProcessor.handleFileAnalysis(ctx, flowDynamic);
          
          logger.info(`An√°lisis de archivo enviado al usuario ${userId}`);
        } catch (error) {
          logger.error(`Error al procesar el documento para usuario ${userId}: ${error.message}`);
          await flowDynamic('‚ùå Hubo un error al procesar tu archivo. Por favor, intenta enviarlo nuevamente o contacta con soporte si el problema persiste.');
        }
      });
    }

    createConfirmedFlow() {
      return addKeyword(EVENTS.ACTION)
        .addAction(this.blacklistMiddleware.bind(this))
        .addAction(async (ctx, { flowDynamic, endFlow }) => {
          // Modificaci√≥n: Eliminar env√≠o de "SOLICITUD_HUMANO"
          this.addToBlacklist(ctx.from, config.humanBlacklistDuration);
          logger.info(`Cotizaci√≥n ya confirmada para ${ctx.from}. Redirigiendo a atenci√≥n humana.`);
          return endFlow();
        });
    }
    
      createRestartBotFlow() {
        return addKeyword(['bot', 'Bot', 'BOT'])
          .addAction(async (ctx, { flowDynamic, gotoFlow }) => {
            const userId = ctx.from;
            logger.info(`Intento de reinicio de bot por usuario ${userId}`);
            this.resetConversation(userId, true); // Reiniciar initialMessagesSent
            logger.info(`Bot reiniciado para usuario ${userId}`);
            await flowDynamic('*¬°Bienvenido de nuevo!* üéâ El bot ha sido reiniciado. *¬øEn qu√© puedo ayudarte hoy?* üòä');
            return gotoFlow(this.flows.principalFlow);
          });
      }

    createVoiceNoteFlow() {
      return addKeyword(EVENTS.VOICE_NOTE)
        .addAction(async (ctx, { flowDynamic, state, gotoFlow, endFlow }) => {
          try {
            const audioPath = await whatsappService.saveAudioFile(ctx);
            const transcription = await openaiService.transcribeAudio(audioPath);
            logger.info(`Transcripci√≥n del audio: ${transcription}`);
            
            await state.update({ lastTranscription: transcription });
            await flowDynamic(`*üìù Transcripci√≥n:*\n${transcription}`);
    
            this.enqueueMessage(ctx.from, transcription, async (accumulatedMessage) => {
              await this.handleChatbotResponse(ctx, { flowDynamic, gotoFlow, endFlow }, accumulatedMessage);
            });
          } catch (error) {
            logger.error(`Error al procesar la nota de voz: ${error.message}`);
            await flowDynamic('Hubo un error al procesar la nota de voz. Por favor, intenta enviar un mensaje de texto.');
          }
        });
    }
  
  
    createCatchAllFlow() {
      return addKeyword(EVENTS.ACTION)
        .addAction(this.blacklistMiddleware.bind(this))
        .addAction(async (ctx, { gotoFlow }) => {
          if (orderManager.isOrderConfirmed(ctx.from)) {
            return gotoFlow(this.flows.confirmedFlow);
          } else {
            return gotoFlow(this.flows.principalFlow);
          }
        });
    }
  
    createIdleTimeoutFlow() {
      return addKeyword(EVENTS.ACTION)
        .addAction(async (ctx, { endFlow }) => {
          logger.info(`Tiempo de espera agotado para usuario ${ctx.from}`);
          this.resetConversation(ctx.from);
          return endFlow('*üò¥ Lo siento, el tiempo de espera ha expirado. Tu cotizaci√≥n ha sido cancelada. Si deseas hacer una nueva cotizaci√≥n, por favor env√≠a un mensaje.*');
        });
    }
  
    createPromoFlow() {
      return addKeyword(EVENTS.ACTION)
        .addAction(async (ctx, { flowDynamic, endFlow }) => {
          const promoMessage = whatsappService.getPromoMessage();
          try {
            await flowDynamic(promoMessage);
            logger.info(`Mensaje promocional enviado a ${ctx.from}`);
          } catch (error) {
            logger.error(`Error al enviar mensaje promocional a ${ctx.from}: ${error.message}`);
          }
          return endFlow();
        });
    }
  
    enqueueMessage(userId, message, callback) {
      this.messageQueue.enqueueMessage(userId, message, callback);
    }
  
    async handleChatbotResponse(ctx, { flowDynamic, gotoFlow, endFlow }, message, instruction = '') {
      const userId = ctx.from;
      logger.info(`Procesando mensaje para usuario ${userId}: ${message}`);
  
      if (this.isBlacklisted(userId)) {
        logger.info(`Usuario ${userId} en lista negra. Mensaje ignorado.`);
        return endFlow();
      }

      // Verificar palabras clave para atenci√≥n humana
      const normalizedMessage = message.toLowerCase().trim();
      if (normalizedMessage === 'agente' || normalizedMessage === 'humano') {
        const result = await this.handleHumanAssistanceRequest(userId, flowDynamic);
        if (result.shouldEnd) {
          return endFlow();
        }
      }
  
      if (orderManager.isOrderConfirmed(userId)) {
        logger.info(`Cotizaci√≥n ya confirmada para ${userId}. Redirigiendo a atenci√≥n humana.`);
        return gotoFlow(this.getFlowByName('confirmedFlow'));
      }
  
      this.startIdleTimer(ctx, flowDynamic, gotoFlow);
  
      try {
        const userContext = userContextManager.getUserContext(userId);
        const chatContext = userContextManager.getChatContext(userId);
  
        let aiResponse = await openaiService.getChatCompletion(
          openaiService.getSystemPrompt(userContext.services, userContext.currentOrder, userContext.additionalInfo, chatContext),
          [...chatContext, { role: "user", content: message }],
          instruction
        );
  
        logger.info(`Respuesta inicial de AI para ${userId}: ${aiResponse}`);
  
        // Procesar comandos en la respuesta de la IA
        const commands = this.processAIResponse(aiResponse);
        let currentOrderUpdated = false;
        let missingFields = [];
        let responseHandled = false; // Nueva variable para controlar si la respuesta ya fue manejada
  
        for (const command of commands) {
          // Validar comando antes de procesarlo
          const { validatedCommand, responseSent } = await this.validateCommand(command, userId, aiResponse, message, ctx, flowDynamic);
          if (validatedCommand) {
            if (typeof validatedCommand === 'object') {
              const result = await commandProcessor.processCommand(validatedCommand, userId, ctx, { flowDynamic, gotoFlow, endFlow });
              if (result.currentOrderUpdated) {
                currentOrderUpdated = true;
              }
              if (result.missingFields && result.missingFields.length > 0) {
                missingFields = result.missingFields;
              }
              if (result.messagesSent) {
                logger.info(`Mensajes enviados por comando ${command.command} para ${userId}`);
              }
              if (result.data) {
                await flowDynamic(result.data);
                responseHandled = true;
              }
            }
          }
  
          // Si la respuesta ya fue manejada en validateCommand, establecemos responseHandled en true
          if (responseSent) {
            responseHandled = true;
            break; // Salimos del bucle ya que la respuesta ha sido manejada
          }
        }
  
        // Solo enviar la respuesta original de la IA si no ha sido manejada ya
        if (!responseHandled) {
          const filteredResponse = this.filterJsonCommands(aiResponse);
          if (filteredResponse) {
            await flowDynamic(filteredResponse);
            // Actualizar el contexto con la respuesta enviada
            userContextManager.updateContext(userId, aiResponse, "assistant");
          }
        }
  
        // Actualizar el contexto con el mensaje del usuario
        userContextManager.updateContext(userId, message, "user");
  
        // Manejo de orden completa
        if (userContextManager.isOrderComplete(userId)) {
          logger.info(`Orden completa para ${userId}. Confirmando pedido.`);
          // Enviar comando de confirmaci√≥n
          await commandProcessor.processCommand({ command: "CONFIRM_ORDER" }, userId, ctx, { flowDynamic, gotoFlow, endFlow });
          return gotoFlow(this.getFlowByName('confirmedFlow'));
        }
  
      } catch (error) {
        logger.error(`Error al procesar respuesta para usuario ${userId}: ${error.message}`);
        logger.error(`Stack trace: ${error.stack}`);
        await flowDynamic("Lo siento, ha ocurrido un error inesperado. Por favor, intenta nuevamente en unos momentos.");
      }
    }


  
    processAIResponse(aiResponse) {
      const commandRegex = /{[^}]+}/g;
      const commands = aiResponse.match(commandRegex) || [];
      return commands.map(cmd => {
        try {
          return JSON.parse(cmd);
        } catch (error) {
          logger.error(`Error al parsear comando JSON: ${error.message}`);
          return null;
        }
      }).filter(cmd => cmd !== null);
    }

    filterJsonCommands(aiResponse) {
      // Eliminar todos los comandos JSON de la respuesta
      return aiResponse.replace(/\{.*?\}/g, '').trim();
    }
  
    setIdleTimers(userId, timers) {
      this.idleTimers.set(userId, timers);
    }
  
    addToBlacklist(userId, duration) {
      this.blacklist.set(userId, Date.now() + duration);
      logger.info(`Usuario ${userId} a√±adido a la lista negra por ${duration/1000} segundos`);
    }
  
    isBlacklisted(userId) {
      if (this.blacklist.has(userId)) {
        const blacklistExpiry = this.blacklist.get(userId);
        if (Date.now() < blacklistExpiry) {
          logger.info(`Usuario ${userId} est√° en la lista negra. Tiempo restante: ${(blacklistExpiry - Date.now()) / 1000} segundos`);
          return true;
        } else {
          this.blacklist.delete(userId);
          this.resetConversation(userId);
          logger.info(`Usuario ${userId} removido de la lista negra`);
        }
      }
      return false;
    }
  
    resetConversation(userId, resetInitialMessages = false) {
      userContextManager.resetContext(userId, resetInitialMessages);
      orderManager.resetOrderConfirmation(userId);
      this.blacklist.delete(userId);
      this.clearIdleTimer(userId);
      logger.info(`Conversaci√≥n reiniciada para usuario ${userId}, resetInitialMessages: ${resetInitialMessages}`);
    }
  
    startIdleTimer(ctx, flowDynamic, gotoFlow) {
      this.clearIdleTimer(ctx.from);
      
      const warningTimer = setTimeout(async () => {
        await flowDynamic('*‚è∞ ¬øSigues ah√≠? Si necesitas m√°s tiempo, por favor responde cualquier mensaje.*');
      }, config.idleWarningTime);
  
      const timeoutTimer = setTimeout(() => {
        this.resetConversation(ctx.from);
        gotoFlow(this.getFlowByName('idleTimeoutFlow'));
      }, config.idleTimeoutTime);
  
      this.setIdleTimers(ctx.from, { warningTimer, timeoutTimer });
    }
  
    clearIdleTimer(userId) {
      const timers = this.idleTimers.get(userId);
      if (timers) {
        clearTimeout(timers.warningTimer);
        clearTimeout(timers.timeoutTimer);
        this.idleTimers.delete(userId);
      }
    }
  
    blacklistMiddleware(ctx, { endFlow }) {
      if (this.isBlacklisted(ctx.from)) {
        logger.info(`Usuario ${ctx.from} en lista negra. Mensaje ignorado.`);
        return endFlow();
      }
      return false;
    }

    async validateCommand(command, userId, assistantMessage, userMessage, ctx, flowDynamic) {
      if (command.command === "CONFIRM_ORDER") {
        if (!userContextManager.isOrderComplete(userId)) {
          const missingFields = userContextManager.getIncompleteFields(userId);
          logger.warn(`La orden est√° incompleta para el usuario ${userId}. Campos faltantes: ${missingFields.join(', ')}. Revaluando comando CONFIRM_ORDER.`);
  
          // Llamar primero a extractDataFromUserMessage
          const extractedCommand = await this.extractDataFromUserMessage(userMessage, userId);
  
          if (extractedCommand) {
            logger.info(`Comando extra√≠do de extractDataFromUserMessage para usuario ${userId}: ${JSON.stringify(extractedCommand)}`);
  
            // Procesar el comando extra√≠do
            await commandProcessor.processCommand(extractedCommand, userId, ctx, { flowDynamic });
  
            // Generar una instrucci√≥n para getChatCompletion
            const instruction = `
  El cliente acaba de ${this.getActionDescription(extractedCommand)}.
  
  Contin√∫a la conversaci√≥n con el cliente para avanzar en la cotizaci√≥n.
  
  Importante:
  - No incluyas ning√∫n comando JSON en tu respuesta.
  - No muestres los comandos al cliente.
  - Responde de manera natural y amable, siguiendo las pautas del SystemPrompt.
  
  Responde al cliente:
            `;
  
            // Obtener el SystemPrompt actualizado
            const userContext = userContextManager.getUserContext(userId);
            const systemPrompt = openaiService.getSystemPrompt(
              userContext.services,
              userContext.currentOrder,
              userContext.additionalInfo,
              userContext.chatContext
            );
  
            // Llamar a getChatCompletion con la instrucci√≥n
            const aiResponse = await openaiService.getChatCompletion(
              systemPrompt,
              userContext.chatContext,
              instruction
            );
  
            // Actualizar el contexto
            userContextManager.updateContext(userId, aiResponse, "assistant");
  
            // Enviar la respuesta al cliente
            await flowDynamic(aiResponse);
  
            // Indicar que la respuesta ha sido manejada
            return { validatedCommand: null, responseSent: true };
          } else {
            // Si no se extrae un comando v√°lido, proceder a reevaluateCommand
            const newCommandOrResponse = await this.reevaluateCommand(assistantMessage, userMessage, userId, missingFields);
  
            if (newCommandOrResponse) {
              // Procesar el nuevo comando si existe
              if (newCommandOrResponse.command) {
                logger.info(`Nuevo comando obtenido tras revaluaci√≥n: ${JSON.stringify(newCommandOrResponse.command)}`);
                await commandProcessor.processCommand(newCommandOrResponse.command, userId, ctx, { flowDynamic });
              }
  
              // Enviar la respuesta al usuario si existe
              if (newCommandOrResponse.response) {
                await flowDynamic(newCommandOrResponse.response);
                userContextManager.updateContext(userId, newCommandOrResponse.response, "assistant");
              }
  
              // Indicar que la respuesta ha sido manejada
              return { validatedCommand: null, responseSent: true };
            } else {
              // Actualizar el contexto del asistente con los campos faltantes
              const systemMessage = `Campos faltantes: La orden no est√° completa. Faltan los siguientes campos: ${missingFields.join(', ')}`;
              userContextManager.updateContext(userId, systemMessage, "system");
  
              // Informar al usuario
              await flowDynamic("Parece que a√∫n falta informaci√≥n para completar tu pedido. Por favor, proporci√≥nanos los detalles faltantes.");
  
              // Indicar que la respuesta ha sido manejada
              return { validatedCommand: null, responseSent: true };
            }
          }
        }
      }
      return { validatedCommand: command, responseSent: false };
    }  


    // Nueva funci√≥n para describir la acci√≥n basada en el comando
    getActionDescription(command) {
      switch (command.command) {
        case "SELECT_SERVICE":
          return `seleccionado el servicio: ${command.service}`;
        case "SET_MEASURES":
          return `establecido las medidas: ancho ${command.width} m, alto ${command.height} m`;
        case "SET_QUANTITY":
          return `establecido la cantidad: ${command.quantity}`;
        case "SET_FINISHES":
          return `seleccionado las terminaciones: sellado ${command.sellado}, ojetillos ${command.ojetillos}, bolsillo ${command.bolsillo}`;
        default:
          return `realizado una acci√≥n`;
      }
    }




    // Nueva funci√≥n extractDataFromUserMessage
    async extractDataFromUserMessage(userMessage, userId) {
      logger.info(`Intentando extraer comando del mensaje del usuario ${userId}: "${userMessage}"`);
  
      const chatContext = userContextManager.getChatContext(userId);
      const lastMessages = chatContext.slice(-6).map(msg => `${msg.role}: ${msg.content}`).join('\n');
  
      const currentOrder = userContextManager.getCurrentOrder(userId);
  
      const prompt = `
  Eres un asistente experto en impresi√≥n y gesti√≥n de pedidos. A partir del siguiente mensaje del usuario y el contexto de la conversaci√≥n, extrae el comando apropiado para procesar su solicitud.
  
  Historial de la conversaci√≥n:
  ${lastMessages}
  
  Mensaje del usuario:
  "${userMessage}"
  
  Informaci√≥n actual de la orden:
  ${JSON.stringify(currentOrder)}
  
  Lista de servicios disponibles:
  ${JSON.stringify(userContextManager.getAllServices())}
  
  Tu tarea es analizar el mensaje del usuario y, si es posible, extraer el comando adecuado para avanzar en el procesamiento de su pedido. Solo debes devolver un comando JSON v√°lido si est√°s seguro de que el mensaje del usuario contiene la informaci√≥n necesaria.
  
  Posibles comandos:
  - {"command": "SELECT_SERVICE", "service": "Nombre exacto del servicio"}
  - {"command": "SET_MEASURES", "width": X, "height": Y}
  - {"command": "SET_QUANTITY", "quantity": Z}
  - {"command": "SET_FINISHES", "sellado": true/false, "ojetillos": true/false, "bolsillo": true/false}
  
  Si no es posible extraer un comando v√°lido, no devuelvas nada.
  
  No debes devolver ninguna explicaci√≥n ni texto adicional. Solo devuelve el comando JSON si es aplicable.
  `;
  
      try {
        const aiResponse = await openaiService.getChatCompletion(prompt, []);
        logger.info(`Respuesta de extractDataFromUserMessage para usuario ${userId}: ${aiResponse}`);
  
        // Intentar parsear la respuesta como JSON
        try {
          const extractedCommand = JSON.parse(aiResponse);
          return extractedCommand;
        } catch (parseError) {
          logger.warn(`No se pudo parsear el comando extra√≠do para usuario ${userId}: ${parseError.message}`);
          return null;
        }
      } catch (error) {
        logger.error(`Error al extraer comando del mensaje del usuario ${userId}: ${error.message}`);
        return null;
      }
    }


  async reevaluateCommand(assistantMessage, userMessage, userId, missingFields) {
    logger.info(`Reevaluando comando para usuario ${userId}`);

    // Obtener el historial reciente de la conversaci√≥n
    const chatContext = userContextManager.getChatContext(userId);
    const lastMessages = chatContext.slice(-6).map(msg => `${msg.role}: ${msg.content}`).join('\n');

    // Obtener la lista de servicios disponibles
    const services = userContextManager.getGlobalServices();
    const servicesList = Object.values(services).flat().map(service => service.name).join(', ');
    const currentOrder = userContextManager.getCurrentOrder(userId);

    // Modificaci√≥n del prompt para evitar que el asistente asuma valores por defecto
    const prompt = `
Eres un asistente experto en impresi√≥n y gesti√≥n de pedidos. Aqu√≠ est√° la √∫ltima interacci√≥n:

${lastMessages}

Basado en esta interacci√≥n y el estado actual de la orden:
${JSON.stringify(userContextManager.getCurrentOrder(userId))}

Presta especial atenci√≥n a los siguientes detalles del currentOrder:
- Servicio actual: ${currentOrder.service || 'No seleccionado'}
- Categor√≠a: ${currentOrder.category || 'No especificada'}
- Tipo: ${currentOrder.type || 'No especificado'}
- Medidas seleccionadas: 
  * Ancho: ${currentOrder.measures?.width || 'No especificado'} metros
  * Alto: ${currentOrder.measures?.height || 'No especificado'} metros
- Terminaciones elegidas: 
  * Sellado: ${currentOrder.finishes?.sellado ? 'S√≠' : 'No'}
  * Ojetillos: ${currentOrder.finishes?.ojetillos ? 'S√≠' : 'No'}
  * Bolsillo: ${currentOrder.finishes?.bolsillo ? 'S√≠' : 'No'}
- Cantidad: ${currentOrder.quantity || 'No especificada'}
- Archivo de dise√±o: ${currentOrder.filePath ? 'Subido' : 'No subido'}
- Anchos disponibles: ${JSON.stringify(currentOrder.availableWidths)}
- Terminaciones disponibles: ${JSON.stringify(currentOrder.availableFinishes)}
- √Årea del servicio: ${currentOrder.areaServicio || 'No calculada'} m¬≤

Lista de servicios disponibles: ${servicesList}

Los campos faltantes en la orden son: ${missingFields.join(', ')}

Tu objetivo es ayudar al usuario a completar la informaci√≥n faltante sin asumir ning√∫n valor por defecto. No debes asignar valores a campos faltantes a menos que el usuario los haya proporcionado expl√≠citamente.

Analiza si el comando 'CONFIRM_ORDER' es apropiado. Si la orden est√° incompleta, determina la mejor respuesta posible al usuario para ayudarlo a proporcionar la informaci√≥n faltante.

Recuerda:
- No asumas servicios o valores que el usuario no haya mencionado expl√≠citamente.
- Si el usuario est√° confirmando la selecci√≥n de un servicio, pero no ha proporcionado el nombre del servicio, p√≠dele amablemente que especifique el servicio que desea.
- Proporciona una respuesta clara y amable que gu√≠e al usuario a proporcionar la informaci√≥n faltante.

No debes devolver ning√∫n comando en este caso. Responde al usuario de manera que contin√∫e la conversaci√≥n y facilite la obtenci√≥n de la informaci√≥n necesaria.
    `;

    try {
        const aiResponse = await openaiService.getChatCompletion(prompt, []);
        logger.info(`Respuesta de reevaluaci√≥n del modelo para usuario ${userId}: ${aiResponse}`);

        // Como hemos instruido al asistente a no devolver comandos, procesamos solo la respuesta
        return { command: null, response: aiResponse.trim() };
    } catch (error) {
        logger.error(`Error al reevaluar comando para usuario ${userId}: ${error.message}`);
        return null;
    }
  }



   // Nueva funci√≥n auxiliar para manejar atenci√≥n humana
   async handleHumanAssistanceRequest(userId, flowDynamic) {
    logger.info(`Procesando solicitud de atenci√≥n humana para usuario ${userId}`);
    
    try {
      const additionalInfo = userContextManager.getGlobalAdditionalInfo();
      const responseMessage = this.createHumanAssistanceMessage(additionalInfo.horarios);
      
      // Agregar a blacklist y limpiar timers
      this.addToBlacklist(userId, config.humanBlacklistDuration);
      this.clearIdleTimer(userId);
      
      await flowDynamic(responseMessage);
      logger.info(`Usuario ${userId} redirigido exitosamente a atenci√≥n humana`);
      
      return {
        success: true,
        shouldEnd: true
      };
    } catch (error) {
      logger.error(`Error al procesar solicitud de atenci√≥n humana para ${userId}: ${error.message}`);
      await flowDynamic('Lo siento, ha ocurrido un error. Un agente se pondr√° en contacto contigo pronto.');
      return {
        success: false,
        shouldEnd: true,
        error: error
      };
    }
  }

  // Nueva funci√≥n auxiliar para crear el mensaje de atenci√≥n humana
  createHumanAssistanceMessage(horarios = {}) {
    const defaultHorarios = {
      'Lunes a viernes': '9:00 - 18:00 hrs',
      'S√°bados': '9:00 - 14:00 hrs'
    };

    const horariosActuales = {
      ...defaultHorarios,
      ...horarios
    };

    return `üëã Entiendo que prefieres hablar con un agente humano.
Un representante de nuestro equipo se pondr√° en contacto contigo lo antes posible.

‚è∞ Horario de atenci√≥n:
Lunes a Viernes: ${horariosActuales['Lunes a viernes']}
S√°bados: ${horariosActuales['S√°bados']}

üôè Gracias por tu paciencia.`;
    }




  }
  
  export default new FlowManager();


// Archivo: modules\orderManager.js

import logger from '../utils/logger.js';
import { formatPrice, censorPhoneNumber } from '../utils/helpers.js';
import moment from 'moment-timezone';
import config from '../config/config.js';
import sheetService from '../services/sheetService.js';
import userContextManager from './userContext.js';
import { CustomError } from '../utils/errorHandler.js';
import googleDriveService from '../services/googleDriveService.js';
import emailService from '../services/emailService.js'; // Modificado

class OrderManager {
  constructor() {
    this.orderConfirmed = new Set();
  }

  async handleSelectService(userId, serviceName) {
    logger.info(`Manejando selecci√≥n de servicio para usuario ${userId}: ${serviceName}`);
    try {
      const serviceInfo = userContextManager.getServiceInfo(serviceName);
      
      if (!serviceInfo) {
        const similarServices = userContextManager.findSimilarServices(serviceName);
        return {
          action: "INVALID_SERVICE",
          similarServices,
          order: userContextManager.getCurrentOrder(userId)
        };
      }

      userContextManager.updateCurrentOrder(userId, { 
        service: serviceName,
        category: serviceInfo.category,
        availableWidths: serviceInfo.availableWidths,
        availableFinishes: userContextManager.getAvailableFinishes(serviceInfo)
      });
      
      return {
        action: "SELECT_SERVICE",
        order: userContextManager.getCurrentOrder(userId),
        serviceInfo: serviceInfo
      };
    } catch (error) {
      logger.error(`Error al seleccionar servicio para usuario ${userId}: ${error.message}`);
      throw new CustomError('ServiceSelectionError', 'Error al seleccionar el servicio', error);
    }
  }

  async handleSetMeasures(userId, width, height) {
    logger.info(`Manejando configuraci√≥n de medidas para usuario ${userId}: ${width}x${height}`);
    try {
      const currentOrder = userContextManager.getCurrentOrder(userId);
      const serviceInfo = userContextManager.getServiceInfo(currentOrder.service);

      if (!['Telas PVC', 'Banderas', 'Adhesivos', 'Adhesivo Vehicular', 'Back Light'].includes(serviceInfo.category)) {
        throw new CustomError('InvalidMeasuresError', 'Este servicio no requiere medidas personalizadas');
      }

      const validWidth = serviceInfo.availableWidths.find(w => w.material === parseFloat(width));
      if (!validWidth) {
        throw new CustomError('InvalidWidthError', 'Ancho no v√°lido para este servicio');
      }

      if (parseFloat(height) < 1) {
        throw new CustomError('InvalidHeightError', 'El alto debe ser mayor o igual a 1 metro');
      }

      const measures = { width: validWidth.material, height: parseFloat(height) };
      const areaServicio = measures.width * measures.height; // Calcular √°rea del servicio
      const { total, area } = this.calculatePrice({ ...currentOrder, measures });

      userContextManager.updateCurrentOrder(userId, { measures, areaServicio, total, area }); // Actualizar areaServicio

      return {
        action: "SET_MEASURES",
        order: userContextManager.getCurrentOrder(userId)
      };
    } catch (error) {
      logger.error(`Error al configurar medidas para usuario ${userId}: ${error.message}`);
      throw new CustomError('MeasuresSetupError', 'Error al configurar las medidas', error);
    }
  }

  async handleSetQuantity(userId, quantity) {
    logger.info(`Manejando configuraci√≥n de cantidad para usuario ${userId}: ${quantity}`);
    try {
      if (quantity <= 0) {
        throw new CustomError('InvalidQuantityError', 'La cantidad debe ser mayor que cero');
      }

      const currentOrder = userContextManager.getCurrentOrder(userId);
      const serviceInfo = userContextManager.getServiceInfo(currentOrder.service);

      if (!['Telas PVC', 'Banderas', 'Adhesivos', 'Adhesivo Vehicular', 'Back Light'].includes(serviceInfo.category)) {
        // Para categor√≠as sin medidas personalizadas, calculamos el precio directamente
        const { total } = this.calculatePrice({ ...currentOrder, quantity });
        userContextManager.updateCurrentOrder(userId, { quantity, total });
      } else {
        userContextManager.updateCurrentOrder(userId, { quantity });
      }

      return {
        action: "SET_QUANTITY",
        order: userContextManager.getCurrentOrder(userId)
      };
    } catch (error) {
      logger.error(`Error al configurar cantidad para usuario ${userId}: ${error.message}`);
      throw new CustomError('QuantitySetupError', 'Error al configurar la cantidad', error);
    }
  }

  async setFinishes(userId, sellado, ojetillos, bolsillo) {
    logger.info(`Manejando configuraci√≥n de acabados para usuario ${userId}`);
    try {
      const currentOrder = userContextManager.getCurrentOrder(userId);
      const serviceInfo = userContextManager.getServiceInfo(currentOrder.service);

      const finishes = {
        sellado: sellado && serviceInfo.sellado,
        ojetillos: ojetillos && serviceInfo.ojetillos,
        bolsillo: bolsillo && serviceInfo.bolsillo
      };

      userContextManager.updateCurrentOrder(userId, { finishes: finishes});

      return {
        action: "SET_FINISHES",
        order: userContextManager.getCurrentOrder(userId)
      };
    } catch (error) {
      logger.error(`Error al configurar acabados para usuario ${userId}: ${error.message}`);
      throw new CustomError('FinishesSetupError', 'Error al configurar los acabados', error);
    }
  }

  async handleValidateFile(userId, isValid, reason) {
    logger.info(`Manejando validaci√≥n de archivo para usuario ${userId}`);
    try {
      userContextManager.updateCurrentOrder(userId, {
        fileAnalysis: { isValid, reason }
      });
      
      return {
        action: "VALIDATE_FILE",
        order: userContextManager.getCurrentOrder(userId)
      };
    } catch (error) {
      logger.error(`Error al validar archivo para usuario ${userId}: ${error.message}`);
      throw new CustomError('FileValidationError', 'Error al validar el archivo', error);
    }
  }

  async handleConfirmOrder(userId) {
    logger.info(`Manejando confirmaci√≥n de pedido para usuario ${userId}`);
    try {
      const currentOrder = userContextManager.getCurrentOrder(userId);
      
      if (!userContextManager.isOrderComplete(userId)) {
        
         // NUEVO: Lanzar excepci√≥n con detalles de campos faltantes
         const missingFields = userContextManager.getIncompleteFields(userId);
         const errorMessage = `La orden no est√° completa. Faltan los siguientes campos: ${missingFields.join(', ')}`;
         logger.warn(errorMessage);
         throw new CustomError('IncompleteOrderError', errorMessage);
      }

      const total = this.calculatePrice(currentOrder);
      userContextManager.updateCurrentOrder(userId, { total: total });

      const orderSummary = this.formatOrderSummary(currentOrder);
      const result = await this.finalizeOrder(userId, currentOrder);

      this.orderConfirmed.add(userId);

      return {
        action: "CONFIRM_ORDER",
        order: currentOrder,
        summary: orderSummary,
        result: result
      };
    } catch (error) {
      logger.error(`Error al confirmar el pedido para usuario ${userId}: ${error.message}`);
      throw new CustomError(error.name || 'OrderConfirmationError', error.message);
    }
  }

  calculatePrice(order) {
    const serviceInfo = userContextManager.getServiceInfo(order.service);
  
    let total = 0;
    let area = 1;
    let precioM2 = serviceInfo.precio;
    let precioTerminaciones = 0;
    let precioTotalTerminaciones = 0;
  
    logger.info(`Calculando precio para orden: ${JSON.stringify(order)}`);
    logger.info(`Informaci√≥n del servicio: ${JSON.stringify(serviceInfo)}`);
  
    if (['Telas PVC', 'Banderas', 'Adhesivos', 'Adhesivo Vehicular', 'Back Light'].includes(serviceInfo.category)) {
      area = order.measures.width * order.measures.height;
      total = area * precioM2 * order.quantity;
  
      // Calcula el precio de las terminaciones por m2
      if (order.finishes.sellado) {
        precioTerminaciones += serviceInfo.precioSellado;
      }
      if (order.finishes.ojetillos) {
        precioTerminaciones += serviceInfo.precioOjetillos;
      }
      if (order.finishes.bolsillo) {
        precioTerminaciones += serviceInfo.precioBolsillo;
      }
  
      // Calcula el precio total de las terminaciones
      precioTotalTerminaciones = precioTerminaciones * area * order.quantity;
      total += precioTotalTerminaciones;
  
      logger.info(`Precio de terminaciones por m2: ${precioTerminaciones}`);
      logger.info(`Precio total de terminaciones: ${precioTotalTerminaciones}`);
    } else {
      total = precioM2 * order.quantity;
  
      // Para servicios sin medidas, calculamos las terminaciones por unidad
      if (order.finishes.sellado) {
        precioTerminaciones += serviceInfo.precioSellado;
      }
      if (order.finishes.ojetillos) {
        precioTerminaciones += serviceInfo.precioOjetillos;
      }
      if (order.finishes.bolsillo) {
        precioTerminaciones += serviceInfo.precioBolsillo;
      }
  
      precioTotalTerminaciones = precioTerminaciones * order.quantity;
      total += precioTotalTerminaciones;
  
      logger.info(`Precio de terminaciones por unidad: ${precioTerminaciones}`);
      logger.info(`Precio total de terminaciones: ${precioTotalTerminaciones}`);
    }
  
    const precioBase = area * precioM2 * order.quantity;
  
    logger.info(`Precio base: ${precioBase}`);
    logger.info(`Precio total: ${total}`);
  
    return { 
      total, 
      area, 
      precioM2, 
      precioBase, 
      precioTerminaciones, 
      precioTotalTerminaciones
    };
  }

  formatOrderSummary(order) {
    let summary = "üìã *Resumen de tu cotizaci√≥n:*\n\n";

    summary += `üõçÔ∏è *Servicio:* ${order.service}\n`;

    if (order.measures) {
      summary += `üìê *Medidas:* ${order.measures.width}m x ${order.measures.height}m\n`;
      summary += `üìè *√Årea:* ${order.area} m¬≤\n`;
    }

    summary += `üî¢ *Cantidad:* ${order.quantity}\n`;

    if (order.finishes && order.finishes.length > 0) {
      summary += `üé® *Terminaciones:*\n`;
      order.finishes.forEach(finish => {
        summary += `- ${finish}\n`;
      });
    }

    summary += `üíµ *Total:* $${formatPrice(order.total)}\n`;

    return summary;
  }

  async finalizeOrder(userId, order) {
    logger.info(`Finalizando orden para usuario ${userId}`);
    
    const calculatedPrices = this.calculatePrice(order);
    const finalOrder = {
      fecha: moment().tz(config.timezone).format('DD-MM-YYYY HH:mm:ss'),
      telefono: userId,
      nombre: order.userName || 'Cliente',
      servicio: order.service,
      cantidad: order.quantity,
      measures: order.measures,
      area: calculatedPrices.area,
      precioM2: calculatedPrices.precioM2,
      precioBase: calculatedPrices.precioBase,
      terminaciones: Object.entries(order.finishes)
        .filter(([_, value]) => value)
        .map(([key, _]) => key),
      precioTerminaciones: calculatedPrices.precioTerminaciones,
      precioTotalTerminaciones: calculatedPrices.precioTotalTerminaciones,
      total: calculatedPrices.total,
      observaciones: order.observaciones || 'Sin observaciones',
      fileUrl: order.fileUrl,
      correo: order.correo, // Incluir el correo electr√≥nico en el pedido final
    };
  
    logger.info(`Orden final para usuario ${userId}: ${JSON.stringify(finalOrder)}`);
  
    try {
      const result = await sheetService.saveOrder(finalOrder);

      logger.info(`Resultado de guardado para usuario ${userId}: ${JSON.stringify(result)}`);

      if (result.success) {
        this.orderConfirmed.add(userId);
        logger.info(`Cotizaci√≥n finalizada y guardada correctamente para usuario ${userId}`);

        const orderNumber = result.orderNumber;
        
        // Subir archivo y enviar correo electr√≥nico de forma asincrona
        if (order.filePath) {
          this.uploadFileAndSendEmail(order.filePath, userId, orderNumber, finalOrder);
        }

        return {
          success: true,
          message: "Tu cotizaci√≥n ha sido registrada. Un representante se pondr√° en contacto contigo pronto para confirmar los detalles y coordinar la entrega de los archivos finales.",
          orderNumber: orderNumber,
        };
      } else {
        throw new Error("Error al guardar la cotizaci√≥n");
      }
    } catch (error) {
      logger.error(`Error detallado al finalizar la cotizaci√≥n para usuario ${userId}:`, error);
      throw new CustomError('OrderFinalizationError', 'Error al finalizar la cotizaci√≥n', error);
    }
  }

  // Nuevo m√©todo para manejar la subida del archivo y el env√≠o del correo
  uploadFileAndSendEmail(filePath, userId, orderNumber, finalOrder) {
    // No usamos await aqu√≠ para no bloquear
    (async () => {
      try {
        const fileUrl = await this.uploadFileToDrive(filePath, userId, orderNumber);
        finalOrder.fileUrl = fileUrl;
        // Actualizar el pedido en Google Sheets con la URL del archivo
        await sheetService.updateOrderWithFileUrl(orderNumber, fileUrl);
        await emailService.sendEmail(finalOrder, orderNumber);
        logger.info(`Archivo subido y correo enviado para el pedido ${orderNumber}`);
      } catch (error) {
        logger.error(`Error al subir el archivo y enviar el correo para el pedido ${orderNumber}: ${error.message}`);
        // Manejar el error seg√∫n sea necesario
      }
    })();
  }


  async uploadFileToDrive(filePath, userPhone, orderNumber) {
    try {
      // Formatear la fecha de manera legible
      const dateFormatted = moment().tz(config.timezone).format('DD-MM-YYYY-HH_mm');
      const fileName = `Pedido_${orderNumber}_${userPhone}_${dateFormatted}`;
      const mimeType = 'application/octet-stream'; // Ajustar seg√∫n el tipo de archivo

      logger.info(`Iniciando subida de archivo para el pedido ${orderNumber}`);

      const fileUrl = await googleDriveService.uploadFile(filePath, fileName, mimeType);

      logger.info(`Archivo subido correctamente. URL: ${fileUrl}`);

      // Actualizar la hoja de c√°lculo con la URL del archivo
      await sheetService.updateOrderWithFileUrl(orderNumber, fileUrl);

      logger.info(`Hoja de c√°lculo actualizada con la URL del archivo para el pedido ${orderNumber}`);

      return fileUrl; // A√±adido: retornar la URL del archivo
    } catch (error) {
      logger.error(`Error al subir archivo a Google Drive para el pedido ${orderNumber}: ${error.message}`);
      throw error; // Lanzar el error para manejarlo en el llamado
    }
  }




  formatOrderForSheet(order) {
    let details = `Servicio: ${order.service}\n`;
    
    if (order.measures) {
      details += `Medidas: ${order.measures.width}m x ${order.measures.height}m\n`;
    }
    
    details += `Cantidad: ${order.quantity}\n`;
    
    if (order.finishes) {
      details += "Terminaciones:\n";
      if (order.finishes.sellado) details += "- Sellado\n";
      if (order.finishes.ojetillos) details += "- Ojetillos\n";
      if (order.finishes.bolsillo) details += "- Bolsillo\n";
    }
    
    return details.trim();
  }

  isOrderConfirmed(userId) {
    return this.orderConfirmed.has(userId);
  }

  resetOrderConfirmation(userId) {
    this.orderConfirmed.delete(userId);
  }
}

export default new OrderManager();


// Archivo: modules\userContext.js

import logger from '../utils/logger.js';
import sheetService from '../services/sheetService.js';

class UserContextManager {
  constructor() {
    this.userContexts = new Map();
  }

  // M√©todo existente para obtener el contexto del usuario
  getUserContext(userId) {
    if (!this.userContexts.has(userId)) {
      this.userContexts.set(userId, {
        context: "",
        chatContext: [],
        currentOrder: this.getEmptyOrder(),
        services: sheetService.getServices(),
        additionalInfo: sheetService.getAdditionalInfo(),
        initialMessagesSent: false,
        hasInteracted: false  // Nuevo estado para rastrear cualquier interacci√≥n
      });
      logger.info(`Nuevo contexto creado para usuario ${userId}`);
    }
    return this.userContexts.get(userId);
  }

  getEmptyOrder() {
    return {
      service: null,
      category: null,
      type: null,
      measures: null,
      finishes: {
        sellado: false,
        ojetillos: false,
        bolsillo: false
      },
      quantity: null,
      filePath: null,
      fileAnalysis: null,
      fileAnalysisResponded: false,
      fileAnalysisHandled: false,
      fileValidation: null,
      availableWidths: [],
      availableFinishes: [],
      price: 0,
      areaServicio: null,
      correo: null, // A√±adido para almacenar el correo electr√≥nico del usuario
      correoConfirmed: false, // Para indicar si el correo ha sido confirmado
    };
  }

  // M√©todo para actualizar el correo electr√≥nico del usuario
  updateCorreo(userId, correo) {
    const userContext = this.getUserContext(userId);
    userContext.currentOrder.correo = correo;
    logger.info(`Correo electr√≥nico actualizado para usuario ${userId}: ${correo}`);
  }

  setInitialMessagesSent(userId, value) {
    const userContext = this.getUserContext(userId);
    userContext.initialMessagesSent = value;
    userContext.hasInteracted = true;
    logger.info(`Estado de mensajes iniciales y interacci√≥n actualizados para usuario ${userId}: ${value}`);
  }

  setHasInteracted(userId, value) {
    const userContext = this.getUserContext(userId);
    userContext.hasInteracted = value;
    logger.info(`Estado de interacci√≥n actualizado para usuario ${userId}: ${value}`);
  }

  hasUserInteracted(userId) {
    return this.getUserContext(userId).hasInteracted;
  }

  updateContext(userId, message, role) {
    const userContext = this.getUserContext(userId);
    userContext.context += `${role}: ${message}\n`;
    userContext.chatContext.push({ role, content: message });
    this.limitContextSize(userId);
    logger.info(`Contexto actualizado para usuario ${userId}. Mensajes en contexto: ${userContext.chatContext.length}`);
  }

  limitContextSize(userId) {
    const userContext = this.getUserContext(userId);
    if (userContext.chatContext.length > 30) {
      userContext.chatContext = userContext.chatContext.slice(-10);
    }
    const words = userContext.context.split(/\s+/);
    if (words.length > 1500) {
      userContext.context = words.slice(-1500).join(" ");
    }
    logger.info(`Contexto limitado para usuario ${userId}`);
  }

  setGlobalData(services, additionalInfo) {
    this.services = services;
    this.additionalInfo = additionalInfo;
    logger.info('Datos globales actualizados en UserContextManager');
    logger.info(`Men√∫ global: ${JSON.stringify(this.services)}`);
    logger.info(`Informaci√≥n adicional global: ${JSON.stringify(this.additionalInfo)}`);
  }

  updateCurrentOrder(userId, updates) {
    const userContext = this.getUserContext(userId);
    userContext.currentOrder = { ...userContext.currentOrder, ...updates };
    logger.info(`Orden actualizada para usuario ${userId}: ${JSON.stringify(userContext.currentOrder)}`);
    
    if (updates.service) {
      const serviceInfo = sheetService.getServiceInfo(updates.service);
      if (serviceInfo) {
        userContext.currentOrder.category = serviceInfo.category;
        userContext.currentOrder.type = serviceInfo.type;
        userContext.currentOrder.availableWidths = serviceInfo.availableWidths;
        userContext.currentOrder.availableFinishes = {
          sellado: serviceInfo.sellado,
          ojetillos: serviceInfo.ojetillos,
          bolsillo: serviceInfo.bolsillo
        };
        userContext.currentOrder.fileValidationCriteria = {
          format: serviceInfo.format,
          minDPI: serviceInfo.minDPI,
        };
        logger.info(`Servicio seleccionado para usuario ${userId}: ${JSON.stringify(serviceInfo)}`);
      } else {
        logger.warn(`Servicio no encontrado: ${updates.service}`);
      }
    }

    if (updates.fileAnalysis) {
      userContext.currentOrder.fileAnalysisResponded = false;
    }

    if (updates.fileValidation) {
      userContext.currentOrder.fileValidation = updates.fileValidation;
    }
    
    logger.info(`Orden actualizada para usuario ${userId}: ${JSON.stringify(userContext.currentOrder)}`);
  }

  updateFileAnalysisResponded(userId, value) {
    const userContext = this.getUserContext(userId);
    userContext.currentOrder.fileAnalysisResponded = value;
    logger.info(`FileAnalysisResponded actualizado para usuario ${userId}: ${value}`);
  }

  updateFileAnalysisHandled(userId, value) {
    const userContext = this.getUserContext(userId);
    userContext.currentOrder.fileAnalysisHandled = value;
    logger.info(`FileAnalysisHandled actualizado para usuario ${userId}: ${value}`);
  }

  hasFileAnalysisBeenResponded(userId) {
    const userContext = this.getUserContext(userId);
    return userContext.currentOrder.fileAnalysisResponded;
  }

  hasFileAnalysisBeenHandled(userId) {
    const userContext = this.getUserContext(userId);
    return userContext.currentOrder.fileAnalysisHandled;
  }

  getCurrentOrder(userId) {
    const userContext = this.getUserContext(userId);
    const currentOrder = userContext.currentOrder;
    currentOrder.requiresMeasures = () => this.isServiceRequiringMeasures(currentOrder.category);
    logger.info(`Obteniendo orden actual para usuario ${userId}: ${JSON.stringify(currentOrder)}`);
    return currentOrder;
  }

  resetContext(userId, resetInitialMessages = false) {
    const userContext = this.getUserContext(userId);
    const initialMessagesSent = resetInitialMessages ? false : userContext.initialMessagesSent;
    this.userContexts.set(userId, {
      context: "",
      chatContext: [],
      currentOrder: this.getEmptyOrder(),
      services: sheetService.getServices(),
      additionalInfo: sheetService.getAdditionalInfo(),
      initialMessagesSent: initialMessagesSent,
      hasInteracted: false  // Reiniciar hasInteracted
    });
    logger.info(`Contexto reiniciado para usuario ${userId}, initialMessagesSent preserved: ${!resetInitialMessages}, hasInteracted reset`);
  }

  getGlobalServices() {
    return sheetService.getServices();
  }

  getGlobalAdditionalInfo() {
    return sheetService.getAdditionalInfo();
  }

  getServiceInfo(serviceName) {
    return sheetService.getServiceInfo(serviceName);
  }

  getAllServices() {
    return sheetService.getAllServices();
  }

  findSimilarServices(serviceName) {
    return sheetService.findSimilarServices(serviceName);
  }

  getServicesInCategory(category) {
    return sheetService.getServicesInCategory(category);
  }

  getFileValidationCriteria() {
    return sheetService.getFileValidationCriteria();
  }

  getAvailableFinishes(serviceInfo) {
    const finishes = [];
    if (serviceInfo.sellado) finishes.push("sellado");
    if (serviceInfo.ojetillos) finishes.push("ojetillos");
    if (serviceInfo.bolsillo) finishes.push("bolsillo");
    return finishes;
  }

  // NUEVO: Funci√≥n para obtener los campos faltantes en la orden actual
  getIncompleteFields(userId) {
    const order = this.getCurrentOrder(userId);
    const missingFields = [];

    // Verificar campos obligatorios
    if (!order.service) missingFields.push('service');
    if (!order.quantity) missingFields.push('quantity');
    if (!order.filePath) missingFields.push('filePath');
    if (!order.fileAnalysis) missingFields.push('fileAnalysis');
    if (!order.fileAnalysisResponded) missingFields.push('fileAnalysisResponded');
    if (!order.fileValidation) missingFields.push('fileValidation');

    // Verificar si el servicio requiere medidas
    if (this.isServiceRequiringMeasures(order.category)) {
      if (!order.measures || !order.measures.width) missingFields.push('width');
      if (!order.measures || !order.measures.height) missingFields.push('height');
      if (!order.areaServicio) missingFields.push('areaServicio');
    }

    logger.info(`Campos faltantes para usuario ${userId}: ${missingFields.join(', ')}`);

    return missingFields;
  }

  // MODIFICADO: isOrderComplete ahora utiliza getIncompleteFields
  isOrderComplete(userId) {
    const missingFields = this.getIncompleteFields(userId);
    return missingFields.length === 0;
  }


    // M√©todo para determinar si el servicio requiere medidas
    isServiceRequiringMeasures(serviceCategory) {
      return ['Telas PVC', 'Banderas', 'Adhesivos', 'Adhesivo Vehicular', 'Back Light'].includes(serviceCategory);
    }
  
  
  getChatContext(userId) {
    return this.getUserContext(userId).chatContext;
  }
}

export default new UserContextManager();

