import logger from './utils/logger.js';
import userContextManager from './modules/userContext.js';
import orderManager from './modules/orderManager.js';
import openaiService from './services/openaiService.js';
import config from './config/config.js';
import sheetService from './services/sheetService.js'
import { formatPrice, sendSplitMessages } from './utils/helpers.js';
import { normalizeCommand, findClosestCommand, sanitizeJsonString } from './utils/commandUtils.js';
import { CustomError } from './utils/errorHandler.js';
import fileOptimizationService from './services/fileOptimizationService.js';

class CommandProcessor {
  constructor() {}

  async processCommand(command, userId, ctx, { flowDynamic, gotoFlow, endFlow }) {
    try {
      logger.info(`Procesando comando para usuario ${userId}: ${JSON.stringify(command)}`);

      // Normalizar y corregir el comando
      const normalizedCommand = normalizeCommand(command.command);
      const correctedCommand = findClosestCommand(normalizedCommand) || normalizedCommand;
      
      logger.info(`Comando normalizado: ${normalizedCommand}, Comando corregido: ${correctedCommand}`);
      
      if (correctedCommand !== command.command) {
        logger.warn(`Comando corregido de "${command.command}" a "${correctedCommand}"`);
      }

      switch (correctedCommand) {
        case "LIST_ALL_SERVICES":
          return this.handleListAllServices(userId);
        case "SELECT_SERVICE":
          return this.handleSelectService(userId, command.service);
        case "SET_MEASURES":
          return this.handleSetMeasures(userId, command.width, command.height);
        case "SET_QUANTITY":
          return this.handleSetQuantity(userId, command.quantity);
        case "SET_FINISHES":
          return this.handleSetFinishes(userId, command.sellado, command.ojetillos, command.bolsillo);
        case "RESULT_ANALYSIS":
            return this.handleAnalysisResult(userId, command.result);
        case "CONFIRM_ORDER":
          return this.handleConfirmOrder(userId, ctx, { flowDynamic, gotoFlow, endFlow });
        case "LIST_LAST_ORDERS":
          return this.handleListLastOrders(userId, flowDynamic);
        default:
          logger.warn(`Comando desconocido recibido: ${command.command}`);
          return { currentOrderUpdated: false };
      }
    } catch (error) {
      logger.error(`Error al procesar comando: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  // Nuevo m√©todo para manejar RESULT_ANALYSIS
  async handleAnalysisResult(userId, result) {
    try {
      const isValid = result === true || result === "true";
      userContextManager.updateCurrentOrder(userId, { fileValidation: isValid });
      logger.info(`Resultado del an√°lisis actualizado para usuario ${userId}: ${isValid}`);
      return { currentOrderUpdated: true };
    } catch (error) {
      logger.error(`Error al actualizar resultado del an√°lisis para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetQuantity(userId, quantity) {
    try {
      const result = await orderManager.handleSetQuantity(userId, quantity);
      logger.info(`Cantidad establecida para usuario ${userId}: ${quantity}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar cantidad para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetFinishes(userId, sellado, ojetillos, bolsillo) {
    try {
      const result = await orderManager.setFinishes(userId, sellado, ojetillos, bolsillo);
      logger.info(`Acabados establecidos para usuario ${userId}: sellado=${sellado}, ojetillos=${ojetillos}, bolsillo=${bolsillo}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar acabados para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }

  async handleSetMeasures(userId, width, height) {
    try {
      const result = await orderManager.handleSetMeasures(userId, width, height);
      logger.info(`Medidas establecidas para usuario ${userId}: ${width}x${height}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al configurar medidas para usuario ${userId}: ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }


  async handleFileAnalysis(ctx, flowDynamic) {
    const userId = ctx.from;
    const currentOrder = userContextManager.getCurrentOrder(userId);
    const fileAnalysis = currentOrder.fileAnalysis;
 
    if (!fileAnalysis) {
      await flowDynamic("Lo siento, parece que no hay un archivo para analizar. Por favor, env√≠a un archivo primero.");
      return;
    }
 
    logger.info(`Iniciando an√°lisis de archivo para usuario ${userId}`);
    let response = "He analizado tu archivo. Aqu√≠ est√°n los resultados:\n\n";
    response += `üìÑ Formato: *${fileAnalysis.format}*\n`;
    response += `üìè Dimensiones en p√≠xeles: *${fileAnalysis.width}x${fileAnalysis.height}*\n`;
   
    const widthM = fileAnalysis.physicalWidth.toFixed(2);
    const heightM = fileAnalysis.physicalHeight.toFixed(2);
    response += `üìê Dimensiones f√≠sicas: *${widthM}x${heightM} m* (${(widthM*100).toFixed(2)}x${(heightM*100).toFixed(2)} cm)\n`;
   
    response += `üìä √Årea del dise√±o: *${fileAnalysis.area} m¬≤*\n`;
    response += `üîç Resoluci√≥n: *${fileAnalysis.dpi} DPI*\n`;
   
    if (fileAnalysis.colorSpace) {
      response += `üé® Espacio de color: *${fileAnalysis.colorSpace}*\n`;
    }
   
    if (fileAnalysis.fileSize) {
      response += `üì¶ Tama√±o del archivo: *${fileAnalysis.fileSize}*\n`;
    }
 
    logger.info(`An√°lisis de archivo completado para usuario ${userId}: ${JSON.stringify(fileAnalysis)}`);
    await flowDynamic(response);
    userContextManager.updateFileAnalysisResponded(userId, true);

    // Generar y enviar el segundo mensaje
    await this.handleFileValidationInstruction(ctx, flowDynamic);
  }


async handleFileValidationInstruction(ctx, flowDynamic) {
  const userId = ctx.from;
  const currentOrder = userContextManager.getCurrentOrder(userId);

  logger.info(`Iniciando validaci√≥n de archivo para usuario ${userId}`);

  // Verificar que el currentOrder est√° actualizado
  if (!currentOrder.service || (!currentOrder.measures && currentOrder.requiresMeasures())) {
      await flowDynamic("Parece que falta informaci√≥n en tu pedido. Por favor, aseg√∫rate de haber proporcionado el servicio y las medidas necesarias.");
      return;
  }

  try {
      // Obtener optimizaci√≥n del archivo
      const fileInfo = currentOrder.fileAnalysis;
      if (!fileInfo) {
          throw new Error('No se encontr√≥ an√°lisis del archivo');
      }

      // Calcular optimizaci√≥n usando el nuevo servicio
      const optimizationResult = fileOptimizationService.calculateOptimalDPI(
          currentOrder.areaServicio,
          fileInfo.fileSize,
          fileInfo.dpi
      );

      // Generar reporte t√©cnico
      const technicalReport = fileOptimizationService.generateOptimizationReport(optimizationResult);
      logger.info("Reporte tecnico"),
      logger.info(technicalReport);
      // Mantener las gu√≠as DPI originales para contexto
      const dpiGuidelines = `
      üìè **Resoluci√≥n (DPI) seg√∫n el √Årea y Distancia de Visualizaci√≥n** üìê
  
      Ten en cuenta lo siguiente sobre la resoluci√≥n (DPI) en funci√≥n del √°rea del servicio *${currentOrder.areaServicio} m¬≤* y la distancia de visualizaci√≥n, aplicando a productos espec√≠ficos de *Chileimprime*:
  
      - **√Åreas peque√±as (menos de 1.0 m¬≤)** üñºÔ∏è:
        - Se recomienda una resoluci√≥n de *150-300 DPI* para obtener alta calidad.
        - Ideal para productos como *Tarjetas de presentaci√≥n (1000 unidades)*, *Flyers 15√ó22 cms*, y *Mini Roller de escritorio papel sint√©tico*, los cuales se observan de cerca (distancia menor a *1.5 metros*).
  
      - **√Åreas medianas (1.5 m¬≤ a 5 m¬≤)** üìä:
        - La resoluci√≥n puede oscilar entre *72 y 150 DPI*.
        - Adecuada para *Pendones Roller 90x200 cms*, *Palomas 2 caras 70x120 cms*, y *PVC 11 Oz mt¬≤*, que se visualizan desde distancias intermedias (*1.5 a 3 metros*).
  
      - **√Åreas grandes (5 m¬≤ a 10 m¬≤)** üì¢:
        - Se recomienda una resoluci√≥n entre *35 y 72 DPI*.
        - Ideal para *Back Light Banner*, *Tela Mesh* y *PVC Blackout*, que se ver√°n a distancias de *3 a 5 metros*.
  
      - **√Åreas muy grandes (m√°s de 10 m¬≤)** üè¢:
        - Resoluciones bajas, entre *20 y 35 DPI*, son aceptables debido a que estos gr√°ficos se ven desde distancias mayores a *5 metros*.
        - Ejemplos: *Murales publicitarios*, *Back Light Textil*, o *Windows One Vision* que ser√°n observados a grandes distancias.
  
      ### üìå Notas Adicionales:
      1. **Distancia de Visualizaci√≥n** üëÄ: Es un factor cr√≠tico para determinar el DPI correcto. A mayor distancia, menor es la necesidad de alta resoluci√≥n, ya que el ojo humano no distingue los detalles finos.
      2. **Tama√±o del Archivo** üíæ: Usar resoluciones demasiado altas en √°reas grandes como *PVC Alta Definici√≥n* para grandes formatos incrementa significativamente el tama√±o del archivo y el tiempo de impresi√≥n sin una mejora perceptible en la calidad visual.
      3. **Material Espec√≠fico** üß±: Productos como *Adhesivo Empavonado*, *Vinilo Adhesivo Reflectante* y *Rotulaci√≥n para fundido* requieren considerar el material y su capacidad de impresi√≥n, por lo que es recomendable mantener el DPI en el rango medio de *72-150 DPI* para garantizar una buena nitidez.
  
      ‚ú® **Emojis y Formateo**:
      - Utiliza emojis relevantes para resaltar puntos importantes.
      - Aplica **formateo con asteriscos** usando un asterisco por lado (*texto*) para resaltar palabras clave.
      - Aseg√∫rate de mantener una estructura clara con saltos de l√≠nea para facilitar la lectura en WhatsApp.
  
      Estas gu√≠as te ayudar√°n a optimizar la calidad y la eficiencia en cada proyecto de impresi√≥n seg√∫n el tipo de producto y su aplicaci√≥n en el mercado chileno.
      `;

      // Generar la instrucci√≥n para la IA combinando la informaci√≥n t√©cnica
      const instruction = `üîÑ **Nueva Solicitud de Archivo** üìÇ

      El usuario acaba de subir un archivo. Ahora eres un **experto en impresi√≥n de gran formato** e **ingeniero en color**. 
      
      An√°lisis T√©cnico del Archivo:
      ${technicalReport}

      Informaci√≥n del Pedido:
      - Servicio: *${currentOrder.service}*
      - √Årea: *${currentOrder.areaServicio} m¬≤*
      - Medidas solicitadas: *${currentOrder.measures ? `${currentOrder.measures.width}x${currentOrder.measures.height} m` : 'No especificadas'}*
      
      An√°lisis del Archivo:
      - Formato: *${fileInfo.format}*
      - DPI actual: *${fileInfo.dpi}*
      - √Årea del dise√±o: *${fileInfo.area} m¬≤*
      - Espacio de color: *${fileInfo.colorSpace}*
      
      Directrices DPI:
      ${dpiGuidelines}

      Criterios de Validaci√≥n:
      ${userContextManager.getFileValidationCriteria()}

    ‚ö†Ô∏è **IMPORTANTE**:
    - Al inicio de tu respuesta, incluye el comando JSON:
      {"command": "RESULT_ANALYSIS", "result": true/false}
    
    - Estructura tu respuesta en 3 secciones:
      1. ### üîç Criterios de Validaci√≥n Aplicados:
         - Solo mencionar los criterios relevantes para el archivo del cliente
         - NO incluir informaci√≥n sobre resoluci√≥n de m√°quinas de impresi√≥n

      2. ### ‚úÖ/‚ùå Resultado de la Validaci√≥n:
         Si el resultado es positivo:
         - Confirmar que el archivo es v√°lido
         - Invitar al cliente a confirmar el pedido
         - Mencionar cualquier recomendaci√≥n menor si aplica

         Si el resultado es negativo:
         - Explicar claramente por qu√© el archivo no es v√°lido
         - Proporcionar recomendaciones espec√≠ficas para corregir el archivo
         - Ofrecer la opci√≥n de aceptar el archivo bajo responsabilidad del cliente con el siguiente texto:
           "Si a√∫n deseas proceder con este archivo a pesar de las observaciones mencionadas, puedes confirmar que aceptas 
           la impresi√≥n bajo tu responsabilidad, entendiendo que la calidad final podr√≠a verse afectada."

      3. ### üëâ Siguiente Paso:
         Si es v√°lido:
         - Indicar que puede proceder a confirmar el pedido
         
         Si no es v√°lido:
         - Indicar que puede subir un nuevo archivo corregido
         - O confirmar que acepta proceder bajo su responsabilidad
         - En caso de dudas, sugerir contactar con un agente.
      `;

      // Log para depuraci√≥n
      logger.info(`Enviando instrucci√≥n a la IA para validaci√≥n de archivo para usuario ${userId}`);
      logger.debug(`Instrucci√≥n completa: ${instruction}`);

      // Obtener respuesta de la IA
      const aiResponse = await openaiService.getChatCompletion(
          openaiService.getSystemPrompt(
              userContextManager.getGlobalServices(),
              currentOrder,
              userContextManager.getGlobalAdditionalInfo(),
              userContextManager.getChatContext(userId)
          ),
          userContextManager.getChatContext(userId).concat([
              { role: "system", content: instruction }
          ])
      );

      // Actualizar contexto
      userContextManager.updateContext(userId, instruction, "system");
      userContextManager.updateContext(userId, aiResponse, "assistant");

      // Actualizar optimizaci√≥n en el contexto
      userContextManager.updateCurrentOrder(userId, {
          fileOptimization: optimizationResult
      });

      // Procesar comandos en la respuesta
      const commands = this.processAIResponseCommandProcessor(aiResponse);
      for (const command of commands) {
          await this.processCommand(command, userId, ctx, { flowDynamic });
      }

      // Enviar respuesta al usuario
      await sendSplitMessages(flowDynamic, aiResponse);

      logger.info(`Validaci√≥n de archivo completada para usuario ${userId}`);

  } catch (error) {
      logger.error(`Error en validaci√≥n de archivo para usuario ${userId}: ${error.message}`);
      await flowDynamic("‚ùå Ha ocurrido un error al analizar tu archivo. Por favor, intenta nuevamente o contacta con soporte.");
  }
}

  processAIResponseCommandProcessor(aiResponse) {
    const commandRegex = /{[^}]+}/g;
    const commands = aiResponse.match(commandRegex) || [];
    return commands.map(cmd => {
      try {
        const sanitizedCmd = sanitizeJsonString(cmd);
        logger.debug(`Comando sanitizado: ${sanitizedCmd}`);
        const parsedCmd = JSON.parse(sanitizedCmd);
        logger.info(`Comando parseado correctamente: ${JSON.stringify(parsedCmd)}`);
        return parsedCmd;
      } catch (error) {
        logger.error(`Error al parsear comando JSON: ${error.message}`);
        logger.debug(`Comando problem√°tico: ${cmd}`);
        return null;
      }
    }).filter(cmd => cmd !== null);
  }
  

  async handleListAllServices(userId, actions) {
    const services = sheetService.getServices();
    const formattedServices = this.formatServiceList(services);
    logger.info(`Lista de servicios preparada para usuario ${userId}`);
    
    return { 
      currentOrderUpdated: true, 
      action: 'SHOW_SERVICES',
      data: formattedServices
    };
  }

  formatServiceList(services) {
    let formattedList = "Aqu√≠ tienes la lista completa de servicios disponibles:\n\n";

    const categoryEmojis = {
      'Telas PVC': 'üñºÔ∏è',
      'Banderas': 'üö©',
      'Adhesivos': 'üè∑Ô∏è',
      'Adhesivo Vehicular': 'üöó',
      'Back Light': 'üí°',
      'Otros': 'üì¶',
      'Imprenta': 'üñ®Ô∏è',
      'P√©ndon Roller': 'üéûÔ∏è',
      'Palomas': 'üê¶',
      'Figuras': 'üî∫',
      'Extras': '‚ûï'
    };

    for (const [category, categoryServices] of Object.entries(services)) {
      const emojiIcon = categoryEmojis[category] || '';
      formattedList += `${emojiIcon} *${category}:*\n`;

      categoryServices.forEach(service => {
        const serviceName = service.name;
        const priceFormatted = formatPrice(service.precio);
        const priceBold = `*$${
          priceFormatted
        }*`; // Envuelve el precio con asteriscos para negrita
        formattedList += `- ${serviceName}: ${priceBold}\n`;
      });
      formattedList += "\n";
    }

    formattedList += "Para obtener m√°s informaci√≥n sobre un servicio espec√≠fico, por favor menciona su nombre.";
    return formattedList;
  }

  async handleSelectService(userId, serviceName) {
    if (!serviceName) {
      logger.warn(`Nombre de servicio inv√°lido: ${serviceName}`);
      await flowDynamic('Parece que no has especificado un servicio v√°lido. Por favor, ind√≠canos qu√© servicio deseas.');
      return { currentOrderUpdated: false, error: 'El nombre del servicio es inv√°lido o no se proporcion√≥.' };
    }

    try {
      const result = await orderManager.handleSelectService(userId, serviceName);
      logger.info(`Servicio seleccionado para usuario ${userId}: ${serviceName}`);
      return { currentOrderUpdated: true, ...result };
    } catch (error) {
      logger.error(`Error al seleccionar servicio para usuario ${userId}: ${error.message}`);
      await flowDynamic(`Lo siento, ha ocurrido un error al seleccionar el servicio. ${error.message}`);
      return { currentOrderUpdated: false, error: error.message };
    }
  }


  async handleConfirmOrder(userId, ctx, { flowDynamic, gotoFlow, endFlow }) {
    try {
      logger.info(`Iniciando proceso de confirmaci√≥n de orden para usuario ${userId}`);

      // Modificaci√≥n: Verificar si la orden ya est√° confirmada
      if (orderManager.isOrderConfirmed(userId)) {
        logger.warn(`La orden para el usuario ${userId} ya ha sido confirmada. Evitando doble confirmaci√≥n.`);
        await flowDynamic("‚úÖ Tu pedido ya ha sido confirmado previamente. Si necesitas asistencia adicional, por favor contacta con un representante.");
        return { currentOrderUpdated: false };
      }

      const currentOrder = userContextManager.getCurrentOrder(userId);
      
      if (!userContextManager.isOrderComplete(userId)) {
        const missingFields = userContextManager.getIncompleteFields(userId);
        const errorMessage = `La orden no est√° completa. Faltan los siguientes campos: ${missingFields.join(', ')}`;
        logger.warn(errorMessage);
        throw new CustomError('IncompleteOrderError', errorMessage);
      }
  
      // A√±adir informaci√≥n del contexto
      currentOrder.userName = ctx.pushName || 'Cliente';
      currentOrder.userPhone = ctx.from;
  
      // Calcular precios y actualizar la orden
      const calculatedPrices = orderManager.calculatePrice(currentOrder);
      currentOrder.precioTerminaciones = calculatedPrices.precioTerminaciones;
      currentOrder.precioTotalTerminaciones = calculatedPrices.precioTotalTerminaciones;
      currentOrder.total = calculatedPrices.total;
  
      logger.info(`Precios calculados para la orden: ${JSON.stringify(calculatedPrices)}`);
  
      const result = await orderManager.finalizeOrder(userId, currentOrder);
      
      if (result.success) {
        logger.info(`Pedido confirmado para usuario ${userId}. N√∫mero de pedido: ${result.orderNumber}`);

        // Modificaci√≥n: Enviar resumen de la orden
        const orderSummary = orderManager.formatOrderSummary(currentOrder);
        await flowDynamic(`üéâ ¬°Gracias por tu pedido! Tu n√∫mero de cotizaci√≥n es: *${result.orderNumber}*`);
        await flowDynamic(orderSummary);
        await flowDynamic(result.message);

        return { currentOrderUpdated: true, nextFlow: 'promoFlow' };
      } else {
        throw new Error("Error al confirmar el pedido");
      }
    } catch (error) {
      logger.error(`Error al confirmar el pedido para usuario ${userId}: ${error.message}`);
      if (error.name === 'IncompleteOrderError') {
        const systemMessage = `Campos faltantes: ${error.message}`;
        userContextManager.updateContext(userId, systemMessage, "system");
        await flowDynamic("Lo siento, pero parece que falta informaci√≥n en tu pedido. Por favor, completa todos los detalles antes de confirmar.");
        return { currentOrderUpdated: false, error: error.message };
      } else {
        await flowDynamic("Lo siento, ha ocurrido un error al procesar tu pedido. Por favor, intenta nuevamente o contacta con nuestro equipo de soporte.");
        return { currentOrderUpdated: false, error: error.message };
      }
    }
  }



  async handleListLastOrders(userId, flowDynamic) {
    try {
        logger.info(`Solicitando √∫ltimos 10 pedidos para usuario ${userId}`);
        
        const orders = await sheetService.searchOrdersHistory(userId);
        
        if (!orders || orders.length === 0) {
            await flowDynamic("No se encontraron pedidos previos para tu n√∫mero. ¬øTe gustar√≠a realizar tu primer pedido? üòä");
            logger.info(`No se encontraron pedidos para usuario ${userId}`);
            return { currentOrderUpdated: false };
        }

        // Crear mensaje formateado para WhatsApp
        let message = "*üìã Tus √∫ltimos pedidos:*\n\n";
        
        orders.forEach((order, index) => {
            message += `*${index + 1}.* Pedido: *${order.pedido}*\n`;
            message += `   üìÖ Fecha: ${order.fechaOriginal}\n`;
            if (order.servicio) {
                message += `   üñ®Ô∏è Servicio: ${order.servicio}\n`;
            }
            if (order.estado) {
                message += `   üìä Estado: ${order.estado}\n`;
            }
            if (order.total) {
                try {
                    // Convertir el total a n√∫mero y manejar diferentes formatos
                    let totalNumber;
                    if (typeof order.total === 'string') {
                        // Remover el s√≠mbolo de peso y cualquier punto de miles si existe
                        totalNumber = parseFloat(order.total.replace(/[$\.]/g, '').replace(',', '.'));
                    } else {
                        totalNumber = parseFloat(order.total);
                    }

                    if (!isNaN(totalNumber)) {
                        message += `   üí∞ Total: $${formatPrice(totalNumber)}\n`;
                    }
                    
                    logger.debug(`Total procesado para pedido ${order.pedido}: ${totalNumber}`);
                } catch (error) {
                    logger.warn(`Error al formatear precio para pedido ${order.pedido}: ${error.message}`);
                    // Si hay error en el formateo, mostrar el total sin formato
                    message += `   üí∞ Total: ${order.total}\n`;
                }
            }
            message += "\n";
        });

        message += "_Para consultar detalles espec√≠ficos de un pedido o realizar un nuevo pedido, estoy aqu√≠ para ayudarte. üòä_";

        await flowDynamic(message);
        logger.info(`Lista de √∫ltimos pedidos enviada a usuario ${userId}`);
        
        return { currentOrderUpdated: false };
    } catch (error) {
        logger.error(`Error al obtener √∫ltimos pedidos para usuario ${userId}: ${error.message}`);
        logger.error(`Stack trace: ${error.stack}`); // Agregado para mejor debugging
        await flowDynamic("Lo siento, hubo un error al obtener tus pedidos anteriores. Por favor, intenta nuevamente m√°s tarde. üòî");
        return { currentOrderUpdated: false, error: error.message };
    }
}



  
}

export default new CommandProcessor();