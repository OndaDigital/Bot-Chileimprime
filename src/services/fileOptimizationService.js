// services/fileOptimizationService.js
import logger from '../utils/logger.js';
import { CustomError } from '../utils/errorHandler.js';

class FileOptimizationService {
    constructor() {
        // Constantes del sistema
        this.MACHINE_MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024; // 2GB en bytes
        this.MIN_ACCEPTABLE_FILE_SIZE = 100 * 1024; // 100KB m√≠nimo
        this.MAX_ACCEPTABLE_DPI = 300; // DPI m√°ximo absoluto
        this.BYTES_PER_PIXEL_ESTIMATE = 4; // Estimaci√≥n de bytes por pixel (CMYK)
        
        // Configuraci√≥n de DPI por √°rea
        this.DPI_RULES = [
            { maxArea: 1, minDPI: 150, maxDPI: 300, viewDistance: 1, tolerance: 0.2 },
            { maxArea: 3, minDPI: 100, maxDPI: 150, viewDistance: 2, tolerance: 0.25 },
            { maxArea: 5, minDPI: 75, maxDPI: 100, viewDistance: 3, tolerance: 0.3 },
            { maxArea: 10, minDPI: 50, maxDPI: 75, viewDistance: 5, tolerance: 0.35 },
            { maxArea: 15, minDPI: 35, maxDPI: 50, viewDistance: 7, tolerance: 0.4 },
            { maxArea: 20, minDPI: 25, maxDPI: 35, viewDistance: 10, tolerance: 0.45 },
            { maxArea: 30, minDPI: 15, maxDPI: 25, viewDistance: 15, tolerance: 0.5 },
            { maxArea: 50, minDPI: 10, maxDPI: 20, viewDistance: 20, tolerance: 0.55 },
            { maxArea: Infinity, minDPI: 8, maxDPI: 12, viewDistance: 25, tolerance: 0.6 }
        ];

        this.validateConfiguration();
    }

    validateConfiguration() {
        try {
            for (let i = 0; i < this.DPI_RULES.length - 1; i++) {
                if (this.DPI_RULES[i].maxArea >= this.DPI_RULES[i + 1].maxArea) {
                    throw new Error('Las reglas de DPI deben estar ordenadas por maxArea');
                }
            }

            for (const rule of this.DPI_RULES) {
                if (rule.minDPI > rule.maxDPI) {
                    throw new Error('minDPI no puede ser mayor que maxDPI');
                }
                if (rule.tolerance < 0 || rule.tolerance > 1) {
                    throw new Error('La tolerancia debe estar entre 0 y 1');
                }
            }
            
            logger.info('Configuraci√≥n de FileOptimizationService validada correctamente');
        } catch (error) {
            logger.error(`Error en la configuraci√≥n de FileOptimizationService: ${error.message}`);
            throw new CustomError('ConfigurationError', 'Error en la configuraci√≥n del servicio de optimizaci√≥n', error);
        }
    }

    validateInputParameters(area, currentFileSize, currentDPI) {
        if (!area || area <= 0) {
            throw new CustomError('ValidationError', 'El √°rea debe ser un n√∫mero positivo');
        }
        if (!currentFileSize || currentFileSize < this.MIN_ACCEPTABLE_FILE_SIZE) {
            throw new CustomError('ValidationError', 'Tama√±o de archivo inv√°lido');
        }
        if (!currentDPI || currentDPI <= 0 || currentDPI > this.MAX_ACCEPTABLE_DPI) {
            throw new CustomError('ValidationError', 'DPI fuera de rango aceptable');
        }
    }

    calculateOptimalDPI(area, currentFileSize, currentDPI) {
        try {
            this.validateInputParameters(area, currentFileSize, currentDPI);
            
            logger.info(`Calculando DPI √≥ptimo para √°rea: ${area}m¬≤, tama√±o actual: ${currentFileSize} bytes, DPI actual: ${currentDPI}`);

            const rule = this.DPI_RULES.find(r => area <= r.maxArea);
            if (!rule) {
                throw new CustomError('ValidationError', `No se encontr√≥ regla para √°rea: ${area}m¬≤`);
            }

            // Calcular ratio de reducci√≥n necesario basado en tama√±o de archivo
            const sizeRatio = currentFileSize / this.MACHINE_MAX_FILE_SIZE;
            let targetDPI = currentDPI;

            if (sizeRatio > 1) {
                targetDPI = Math.floor(currentDPI / Math.sqrt(sizeRatio));
                logger.info(`Reducci√≥n de DPI necesaria. Ratio: ${sizeRatio}, Nuevo DPI objetivo: ${targetDPI}`);
            }

            // Ajustar dentro de los l√≠mites de la regla
            targetDPI = Math.max(rule.minDPI, Math.min(targetDPI, rule.maxDPI));

            // Calcular estimaci√≥n de nuevo tama√±o
            const estimatedNewSize = this.calculateEstimatedFileSize(area, targetDPI);

            const result = {
                originalDPI: currentDPI,
                recommendedDPI: targetDPI,
                minAcceptableDPI: rule.minDPI,
                maxAcceptableDPI: rule.maxDPI,
                tolerance: rule.tolerance,
                viewDistance: rule.viewDistance,
                willReduceFileSize: targetDPI < currentDPI,
                estimatedNewSize: estimatedNewSize,
                originalSize: currentFileSize,
                isWithinLimits: targetDPI >= rule.minDPI && targetDPI <= rule.maxDPI,
                requiresOptimization: sizeRatio > 1,
                area: area,
                sizeReductionRatio: targetDPI < currentDPI ? (estimatedNewSize / currentFileSize) : 1,
                qualityImpact: this.calculateQualityImpact(currentDPI, targetDPI)
            };

            logger.info(`An√°lisis de optimizaci√≥n completado: ${JSON.stringify(result)}`);
            return result;

        } catch (error) {
            logger.error(`Error en c√°lculo de DPI √≥ptimo: ${error.message}`);
            throw error;
        }
    }

    calculateEstimatedFileSize(area, dpi) {
        const areaInInches = area * 1550.0031;
        const totalPixels = areaInInches * dpi * dpi;
        return Math.floor(totalPixels * this.BYTES_PER_PIXEL_ESTIMATE);
    }

    calculateQualityImpact(originalDPI, newDPI) {
        const ratio = newDPI / originalDPI;
        if (ratio >= 1) return 'ninguno';
        if (ratio >= 0.8) return 'm√≠nimo';
        if (ratio >= 0.6) return 'moderado';
        if (ratio >= 0.4) return 'significativo';
        return 'alto';
    }

    generateOptimizationReport(optimizationResult) {
        const sizeInGB = (size) => (size / (1024 * 1024 * 1024)).toFixed(2);
        
        return `
### üìä *An√°lisis de Optimizaci√≥n*

1. üéØ *DPI y Resoluci√≥n*:
   - DPI Actual: *${optimizationResult.originalDPI}*
   - DPI Recomendado: *${optimizationResult.recommendedDPI}*
   - Rango Aceptable: *${optimizationResult.minAcceptableDPI} - ${optimizationResult.maxAcceptableDPI}*
   - Impacto en Calidad: *${optimizationResult.qualityImpact}*

2. üìè *Distancia de Visualizaci√≥n*:
   - Distancia √ìptima: *${optimizationResult.viewDistance} metros*
   - Tolerancia Permitida: *${(optimizationResult.tolerance * 100).toFixed(0)}%*

3. üíæ *An√°lisis de Archivo*:
   - Tama√±o Actual: *${sizeInGB(optimizationResult.originalSize)} GB*
   - Tama√±o Estimado Despu√©s de Optimizaci√≥n: *${sizeInGB(optimizationResult.estimatedNewSize)} GB*
   ${optimizationResult.requiresOptimization ? 
     `‚ö†Ô∏è *Se requiere optimizaci√≥n para procesamiento*\n   Raz√≥n: El archivo excede el l√≠mite de ${sizeInGB(this.MACHINE_MAX_FILE_SIZE)} GB` : 
     '‚úÖ *Tama√±o dentro de l√≠mites aceptables*'}

4. üîß *Recomendaciones*:
   ${this.generateRecommendations(optimizationResult)}

5. ‚ÑπÔ∏è *Informaci√≥n Adicional*:
   - √Årea de Impresi√≥n: *${optimizationResult.area.toFixed(2)} m¬≤*
   - Categor√≠a de Impresi√≥n: *${this.getAreaCategory(optimizationResult.area)}*
   ${this.generateAdditionalNotes(optimizationResult)}
`;
    }

    getAreaCategory(area) {
        if (area <= 1) return "Peque√±o formato";
        if (area <= 5) return "Formato mediano";
        if (area <= 20) return "Gran formato";
        return "Formato extra grande";
    }

    generateRecommendations(result) {
        const recommendations = [];

        if (result.requiresOptimization) {
            recommendations.push(`- Reducir el DPI a *${result.recommendedDPI}* para optimizar el procesamiento`);
            recommendations.push(`- Utilizar compresi√≥n de imagen preservando la calidad visual`);
            
            if (result.qualityImpact !== 'm√≠nimo') {
                recommendations.push(`- Considerar dividir el dise√±o en secciones si requiere mayor calidad`);
            }
        }

        if (result.originalDPI > result.maxAcceptableDPI) {
            recommendations.push(`- El DPI actual es excesivo para el √°rea de impresi√≥n`);
            recommendations.push(`- Reducir a m√°ximo *${result.maxAcceptableDPI} DPI* para mejor rendimiento`);
        }

        if (result.area > 20) {
            recommendations.push(`- Considerar t√©cnicas de optimizaci√≥n espec√≠ficas para impresiones de gran formato`);
            recommendations.push(`- Verificar la compatibilidad del dise√±o con visualizaci√≥n a distancia`);
        }

        // Recomendaciones espec√≠ficas seg√∫n el tama√±o del archivo
        if (result.originalSize > this.MACHINE_MAX_FILE_SIZE * 0.8) {
            recommendations.push(`- ‚ö†Ô∏è El archivo est√° cerca o supera el l√≠mite m√°ximo de *2GB*`);
            recommendations.push(`- Considerar reducir el DPI o dividir el dise√±o en secciones`);
        }

        // Recomendaciones de color
        if (result.colorSpace && result.colorSpace !== 'CMYK') {
            recommendations.push(`- Convertir el archivo a modo de color *CMYK* para mejor fidelidad de impresi√≥n`);
        }

        if (recommendations.length === 0) {
            recommendations.push(`‚úÖ Archivo √≥ptimo para impresi√≥n`);
        }

        return recommendations.join('\n   ');
    }

    generateAdditionalNotes(result) {
        const notes = [];

        // Notas sobre visualizaci√≥n
        if (result.area > 10) {
            notes.push(`- Para este tama√±o de impresi√≥n, la visualizaci√≥n √≥ptima es desde *${result.viewDistance} metros*`);
        }

        // Notas sobre optimizaci√≥n
        if (result.requiresOptimization) {
            notes.push(`- La optimizaci√≥n sugerida mantendr√° la calidad visual apropiada para la distancia de visualizaci√≥n`);
            
            if (result.sizeReductionRatio < 0.5) {
                notes.push(`- La reducci√≥n significativa del tama√±o del archivo mejorar√° el tiempo de procesamiento`);
            }
        }

        // Notas sobre calidad
        if (result.qualityImpact !== 'ninguno') {
            notes.push(`- El impacto en la calidad ser√° *${result.qualityImpact}*, pero no ser√° perceptible a la distancia de visualizaci√≥n recomendada`);
            
            if (result.qualityImpact === 'significativo' || result.qualityImpact === 'alto') {
                notes.push(`- Se recomienda realizar una prueba de impresi√≥n en un √°rea peque√±a antes de proceder con la impresi√≥n completa`);
            }
        }

        // Notas sobre el formato de archivo
        if (result.area > 30) {
            notes.push(`- Para impresiones de gran formato, aseg√∫rate de que las marcas de corte y sangrado est√©n correctamente definidas`);
        }

        return notes.length > 0 ? notes.join('\n   ') : '';
    }

    // M√©todo auxiliar para conversi√≥n de bytes a unidad legible
    formatFileSize(bytes) {
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = bytes;
        let unitIndex = 0;
        
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        
        return `${size.toFixed(2)} ${units[unitIndex]}`;
    }

    // M√©todo para validar si un archivo puede ser procesado
    canProcessFile(fileSize) {
        if (fileSize > this.MACHINE_MAX_FILE_SIZE) {
            logger.warn(`Archivo demasiado grande: ${this.formatFileSize(fileSize)}`);
            return false;
        }
        return true;
    }

    // M√©todo para sugerir divisi√≥n de archivo
    suggestFileSplitting(area, currentDPI) {
        const currentPixels = area * 1550.0031 * currentDPI * currentDPI;
        const maxPixels = this.MACHINE_MAX_FILE_SIZE / this.BYTES_PER_PIXEL_ESTIMATE;
        
        if (currentPixels > maxPixels) {
            const recommendedSections = Math.ceil(currentPixels / maxPixels);
            const sectionArea = area / recommendedSections;
            
            return {
                needsSplitting: true,
                recommendedSections,
                sectionArea: sectionArea.toFixed(2),
                recommendation: `Se recomienda dividir el dise√±o en ${recommendedSections} secciones de aproximadamente ${sectionArea.toFixed(2)} m¬≤ cada una`
            };
        }
        
        return { needsSplitting: false };
    }
}

export default new FileOptimizationService();